{"version":3,"sources":["utils/settings.js","redux/configureStore.js","themes.config.js","serviceWorker.js","api/subsonicApi.js","redux/actions/alertsActions.js","redux/actions/apiStatusActions.js","redux/actions/playlistsActions.js","redux/actions/searchActions.js","components/SearchBar/SearchBar.js","components/SearchBar/index.js","components/Sidebar/Sidebar.js","components/Sidebar/index.js","components/Navbar/Navbar.js","components/Navbar/index.js","redux/actions/songsActions.js","redux/actions/favouritesActions.js","redux/selectors/musicPlayerSelector.js","utils/formatting.js","components/MusicPlayer/MusicPlayer.js","components/MusicPlayer/index.js","components/InfiniteLineLoader/InfiniteLineLoader.js","components/InfiniteLineLoader/index.js","redux/actions/artistsActions.js","redux/selectors/artistSelectors.js","components/ArtistListElement/ArtistListElement.js","components/ArtistListElement/index.js","components/ArtistListLoader/ArtistListLoader.js","components/ArtistListLoader/index.js","components/ArtistListHeader/ArtistListHeader.js","components/ArtistListHeader/index.js","components/ArtistsList/ArtistsList.js","components/ArtistsList/index.js","redux/actions/albumActions.js","redux/selectors/albumSelectors.js","components/SearchAlbumResult/SearchAlbumResult.js","components/SearchAlbumResult/index.js","components/GenresPicker/GenresPicker.js","components/GenresPicker/index.js","components/AlbumsListFilter/index.js","components/AlbumsListFilter/AlbumsListFilter.js","components/AlbumsList/AlbumsList.js","components/AlbumsList/index.js","redux/selectors/songSelectors.js","components/SongsTable/SongsTable.js","components/SongsTable/index.js","components/PlaylistSelectorDropdown/PlaylistSelectorDropdown.js","components/PlaylistSelectorDropdown/index.js","components/SongsTableEnhanced/SongsTableEnhanced.js","components/SongsTableEnhanced/index.js","components/ArtistAllSongs/ArtistAllSongs.js","components/ArtistAllSongs/index.js","components/Album/Album.js","components/Album/index.js","components/ArtistByAlbums/ArtistByAlbums.js","components/ArtistByAlbums/index.js","components/ResponsiveTitle/ResponsiveTitle.js","components/ResponsiveTitle/index.js","components/Artist/Artist.js","components/Artist/index.js","components/AlbumView/AlbumView.js","components/AlbumView/index.js","components/DeletePlaylistModal/DeletePlaylistModal.js","components/DeletePlaylistModal/index.js","components/EditPlaylistModal/EditPlaylistModal.js","components/EditPlaylistModal/index.js","components/Playlist/Playlist.js","components/Playlist/index.js","components/CreatePlaylistModal/CreatePlaylistModal.js","components/CreatePlaylistModal/index.js","redux/selectors/searchSelectors.js","components/SearchSongResult/SearchSongResult.js","components/SearchSongResult/index.js","components/SearchView/SearchView.js","components/SearchView/index.js","components/FavouritesView/FavouritesView.js","components/FavouritesView/index.js","components/QueueView/QueueView.js","components/QueueView/index.js","components/AlertsManager/AlertsManager.js","components/AlertsManager/index.js","components/RecentlyAddedView/RecentlyAddedView.js","components/RecentlyAddedView/index.js","redux/actions/authActions.js","utils/theming.js","components/ThemePicker/index.js","components/ThemePicker/ThemePicker.js","components/SidebarSettings/index.js","components/SidebarSettings/SidebarSettings.js","components/ScrobbleSetting/index.js","components/ScrobbleSetting/ScrobbleSetting.js","components/SettingsView/SettingsView.js","components/SettingsView/index.js","redux/actions/genresActions.js","components/GenreSongs/GenreSongs.js","components/GenreSongs/index.js","components/GenresView/index.js","components/GenresView/GenresView.js","App.js","components/AuthenticatedComponent/AuthenticatedComponent.js","components/AuthenticatedComponent/index.js","components/LoginView/LoginView.js","components/LoginView/index.js","Main.js","index.js","redux/reducers/initialState.js","utils/redux.js","redux/reducers/asyncTasksReducer.js","redux/reducers/artistsReducer.js","redux/reducers/playlistsReducer.js","redux/reducers/songsReducer.js","redux/reducers/authReducer.js","redux/reducers/searchReducer.js","redux/reducers/alertsReducer.js","redux/reducers/albumsReducer.js","redux/reducers/favouritesReducer.js","redux/reducers/musicPlayerReducer.js","redux/reducers/index.js","redux/configureStore.prod.js","redux/actions/actionTypes.js","utils/utils.js"],"names":["__webpack_require__","d","__webpack_exports__","getIsScrobbling","setIsScrobbling","getVolume","setVolume","getIsShuffleOn","setShuffle","POSSIBLE_SIDEBAR_LINKS","getSidebarDisplaySettings","setSidebarDisplaySettings","DEFAULT_IS_SCROBBLING","value","localStorage","getItem","setItem","DEFAULT_VOLUME","parseFloat","DEFAULT_IS_SHUFFLING","key","icon","text","mobile","arguments","length","undefined","items","savedItems","JSON","parse","filter","item","includes","stringify","map","v","module","exports","require","lightOrange","base-color","darkOrange","lightBlue","darkBlue","lightGreen","darkGreen","lightGrey","darkGrey","Boolean","window","location","hostname","match","buildUrl","config","action","params","base","concat","host","user","password","version","keys","Object","_loop","i","Array","isArray","val","encodeURIComponent","join","perform_api_call","url","fetch","then","response","contentType","headers","get","json","Promise","reject","Error","status","body","data","error","message","subsonicApi","Subsonic","classCallCheck","this","username","encodePassword","assign","getEncodedPassword","result","encoded","charCodeAt","toString","slice","id","type","extras","offset","size","objectSpread","playlistId","songIds","songIdToAdd","songIndexes","songIndexToRemove","name","comment","isPublic","public","query","albumCount","ids","albumId","genre","count","time","submission","ALERT_TYPE_SUCCESS","ALERT_TYPE_WARNING","ALERT_TYPE_ERROR","alertSuccessObject","alert","beginAsyncTask","types","asyncTaskSuccess","alerts","asyncTaskWarning","asyncTaskError","loadPlaylistsSuccess","playlists","payload","addSongsToPlaylistResult","playlistMetadata","songsAdded","playlist","addSongsToPlaylist","songs","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","currentSongs","songsToAdd","songsRequestedToAdd","msg","_msg","wrap","_context2","prev","next","subsonic","getPlaylistById","sent","entry","Set","song","has","s","t0","console","stop","_x2","apply","removeSongsFromPlaylistResult","removedSongs","deletePlaylistSuccess","editPlaylistSuccess","singlePlaylistLoaded","searchAction","search","_ref","_callee","_context","_x","SearchBar","performSearch","_this","props","onSearch","handleKeyDown","e","_this2","react_default","createElement","InputGroup","inside","style","Input","placeholder","onChange","onKeyDown","Button","onClick","Icon","React","PureComponent","defaultProps","HOCSearchBar","navigate","render","SearchBar_SearchBar","Component","connect","Sidebar","possibleConstructorReturn","getPrototypeOf","call","showCreatePlaylistModal","onCreatePlaylistTrigger","onRouteSelected","route","onShowSettings","itemsToDisplay","settings","currentPath","currentLocation","className","components_SearchBar","Nav","activeKey","onSelect","vertical","Item","panel","eventKey","data-pid","songCount","Divider","appearance","block","state","byId","sidebarProps","router_es","pathname","Sidebar_Sidebar_Sidebar","MyNavbar","onNavSelected","Navbar","Body","Dropdown","title","pullRight","navbarProps","Navbar_MyNavbar","putSongsInQueue","songToPlay","seekToSongInQueue","favouriteSongsLoaded","favSongs","starredSongModified","setStarred","starred","setStarOnSongs","star","Date","toISOString","unstar","getQueueSongs","musicPlayer","songsById","getSongCurrentlyPlayingSelector","createSelector","currentSongId","currentId","getSongsInQueueSelector","queue","currentSongIndex","currentIndex","seconds_to_mss","display","isNaN","seconds_to_hhmmss","Number","days","Math","floor","h","m","MusicPlayer","initializeCastPlayer","options","autoJoinPolicy","chrome","cast","AutoJoinPolicy","ORIGIN_SCOPED","androidReceiverCompatible","framework","CastContext","getInstance","setOptions","castPlayer","RemotePlayer","castPlayerController","RemotePlayerController","addEventListener","RemotePlayerEventType","IS_CONNECTED_CHANGED","isCastConnected","setState","log","bind","assertThisInitialized","PLAYER_STATE_CHANGED","castPlayerState","playing","mediaInfo","contentId","metadata","duration","ceil","streamer","CURRENT_TIME_CHANGED","tick","currentTime","QUEUE_DATA_CHANGED","castQueueSongs","nextSongFromCastQueue","find","prevSongs","some","prevSong","request","media","QueueLoadRequest","MediaInfo","contentUrl","getStreamUrl","streamType","StreamType","BUFFERED","MusicTrackMediaMetadata","artist","albumName","album","coverArt","images","Image","getCoverArtUrl","QueueItem","session","getCurrentSession","getSessionObj","queueLoad","play","playOrPause","pause","seek","seekTime","unload","volume","newVolume","volumeLevel","setVolumeLevel","onSeeking","isSeeking","onSeekingStopped","changeVolume","volumeBeforeMutting","toggleMute","isMuted","togglePlayerState","toggleStarOnSong","toggleShuffle","isShuffleOn","goToQueueView","goToArtist","artistId","goToAlbum","playNextSong","playPreviousSong","clearMusicPlayer","clearInterval","timerID","_this3","isAvailable","script","document","src","async","appendChild","navigator","mediaSession","setActionHandler","prevProps","previousSong","shouldScrobble","isTickingEnoughToScrobble","scrobble","now","newSong","Howl","ext","preload","pool","autoplay","html5","onend","startSongTicker","_this4","setInterval","_this5","starIcon","alt","width","height","overflow","IconButton","circle","flexGrow","rc_slider_es","onAfterChange","max","inverse","defaultValue","step","mapDispatchToProps","turnOn","InfiniteLineLoader","isLoading","position","loadArtistsSuccess","artists","artistsIndex","loadSongsOfArtistSuccess","loadSongsOfArtist","_callee3","_context3","abrupt","all","getAlbum","reduce","accum","current","loadOneArtistSuccess","getArtistsWithHeaders","byIndex","header","toConsumableArray","ArtistListElement","nextProps","nextState","shouldReRender","currentSongPlaying","nextArtistId","currentArtistId","currentArtistPlayingId","Col","sm","xs","ownProps","ArtistListLoader","ArtistListHeader","ArtistsList","_React$Component","displayMoreArtists","page","toAdd","elementsRendered","pageSize","artistsAddedInLastSection","keepAdding","elementsAdded","indexToAdd","elementToAdd","push","components_ArtistListHeader","components_ArtistListElement","getNextArtists","_elementsRendered","artistsToDisplay","hasMoreToLoad","hasArtistsToRender","inherits","createClass","loadArtists","padding","flexDirection","marginBottom","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","components_ArtistListLoader","useWindow","getArtists","loadAlbumSuccess","starredAlbumModified","albumIds","albumListLoaded","albums","getAlbums","getAlbumsOfArtist","albumsSelector","SearchAlbumResult","showYear","alignItems","textAlign","Badge","content","data-key","year","GenresPicker","onGenreChanged","displaySongCount","rest","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","genres","setGenres","useEffect","getGenres","g","label","SelectPicker","cleanable","AlbumsListFilter","yearFrom","setYearFrom","_useState3","_useState4","yearTo","setYearTo","_useState5","_useState6","setFilter","showYears","showGenres","flexWrap","RadioGroup","onFilterChanged","inline","Radio","components_GenresPicker","marginLeft","InputNumber","Alert","warning","from","to","NavigationButtons","onPrevious","onNext","disableNext","ButtonGroup","float","marginRight","disabled","AlbumsList","loadAlbums","filtering","setFiltering","loading","setLoading","setNextDisabled","Grid","fluid","Row","md","fontWeight","components_AlbumsListFilter","newFilter","AlbumsList_NavigationButtons","components_SearchAlbumResult","Loader","center","mdHidden","lgHidden","values","_ref3","getAlbumList2","reverse","_x3","getSongs","songsOfArtistSelector","songsOfGenreSelector","songsOfPlaylistSelector","songId","favouriteSongsSelector","favourites","Column","Table","HeaderCell","Cell","CheckCell","rowData","checkedKeys","dataKey","lineHeight","Checkbox","event","stopPropagation","checked","SongsTable","songClicked","onSongClicked","preventClickPropagation","handleCheckAll","onSongsSelected","handleCheck","nextCheckedKeys","handleSortColumn","sortColumn","sortType","sorted","sortSongsByKey","onSongsSorted","applyFilter","filtered","filterSongsByValue","songsFilter","sortable","columnsToShow","columns","defaultColumns","indeterminate","heightProps","autoHeight","onRowClick","virtualized","onSortColumn","rowClassName","selectable","align","SongsTable_CheckCell","split","bitRate","download","Whisper","placement","trigger","speaker","Tooltip","path","href","getDownloadUrl","color","target","rel","PlaylistSelectorDropdown","onItemSelected","onPlaylistSelected","favourites_key","onFavouritesSelected","onQueueSelected","random","queue_key","showFavourites","showQueue","divider","pId","isMine","SongsTableEnhanced","playAll","playAllSongs","onFilterSongs","fixedValue","selectedSongs","addSongsToQueue","_this$props","hasSongsSelected","showPlaylistDropdown","withPlaylistDropdown","showSearchFilter","withSearchFilter","filterValue","showPlayButton","flexFlow","flex","components_PlaylistSelectorDropdown","fixedHeightToFill","index_esm","disableWidth","components_SongsTable","COLUMNS_TO_SHOW","ArtistAllSongs","components_SongsTableEnhanced","Album","starAlbums","linkArtist","starThisAlbum","starStyle","Panel","shaded","bordered","smHidden","xsHidden","lg","marginTop","paddingLeft","unstarAlbums","getSongsOfAlbum","ArtistByAlbums","onAlbumSelected","selectedAlbumId","selectableAlbums","searchable","minWidth","paddingBottom","components_Album","ResponsiveTitle","Fragment","children","Artist","onViewSelected","viewId","selectedView","KEY_ALL_SONGS","loadOneArtist","activeView","components_ResponsiveTitle","KEY_BY_ALBUM","components_ArtistByAlbums","components_ArtistAllSongs","getArtist","AlbumView","loadAlbum","DeletePlaylistModal","closeModalAndDelete","confirmation_name","waitingForDeletion","deletePlaylist","closeDeleteModal","deleteNameError","onHide","playlistToDelete","Modal","backdrop","fontSize","Footer","_ref4","_callee4","_context4","_x4","EditPlaylistModal","setTempPlaylistToDefault","tempPlaylist","closeEditModal","editNameError","closeModalAndEdit","preventDefault","editPlaylist","show","Header","Title","Form","onSubmit","FormGroup","ControlLabel","defaultChecked","_ref6","_callee6","_context6","updatePlaylist","_x6","NOT_MINE_COLUMNS_TO_SHOW","MINE_COLUMNS_TO_SHOW","Playlist","removeSelectedSongs","removeSongsFromPlaylist","selectedIndexes","selectedSong","findIndex","deletedIndexes","formatExternalPlaylistName","replace","triggerEditModal","showEditModal","askDeletionConfirmation","showDeleteModal","loadSinglePlaylist","disableButton","owner","components_DeletePlaylistModal","components_EditPlaylistModal","_ref7","_callee7","_context7","_x7","CreatePlaylistModal","closeModal","onClosePlaylistModal","onPlaylistFormChange","newPlaylist","closeModalAndCreate","playlistNameErrorMessage","createPlaylist","showModal","FormControl","errorMessage","errorPlacement","_ref5","_callee5","_context5","getPlaylists","_x5","searchSongsSelector","SONG_COLUMNS_TO_SHOW","SearchSongResult","SearchView","components_SearchSongResult","FavouritesView","loadFavouriteSongs","b","getStarred","QueueView","removeSongsFromQueue","clearQueue","AlertsManager","alertToShow","success","RecentlyAddedView","componentDidMount","loginUserSuccess","enc","setConfig","loginUserFailure","removeItem","statusText","loginUser","passwordToStore","login","lazyLoginUser","isThemeLight","toLowerCase","startsWith","isThemeDark","getThemeType","loadTheme","theme","file","process","link","dataset","head","ThemePicker","themes","Avatar","utils","background","verticalAlign","data-theme-name","normalized","SidebarSettings","allOptions","setValue","CheckboxGroup","newValue","o","option","ScrobbleSetting","isScrobbling","Toggle","SettingsView","onLogOut","logout","components_ScrobbleSetting","components_ThemePicker","components_SidebarSettings","mdOffset","clear","performGenreRequests","offsets","getSongsByGenre","loadSongsOfGenreSuccess","GenreSongs","loadSongsOfGenre","GenresView","setGenre","components_GenreSongs","App","onCreatePlaylist","loadPlaylists","Container","components_Navbar","components_InfiniteLineLoader","asyncTasksInProgress","es_Sidebar","components_Sidebar","Content","components_RecentlyAddedView","default","components_ArtistsList","components_Artist","components_AlbumsList","components_AlbumView","components_Playlist","components_SearchView","components_FavouritesView","components_QueueView","components_SettingsView","components_GenresView","components_MusicPlayer","components_CreatePlaylistModal","components_AlertsManager","AuthenticatedComponent","isAuthenticated","authenticatingView","margin","isAuthenticating","noThrow","auth","LoginView","onUserDataChange","valid","hostErrorMessage","userErrorMessage","passwordErrorMessage","justifyContent","HelpBlock","NotFound","store","configureStore","ReactDOM","es","Main_NotFound","components_LoginView","components_AuthenticatedComponent","src_App_0","getElementById","serviceWorker","ready","registration","unregister","reducers_initialState","original","createReducer","initialState","reducerMap","reducer","normalize_songs_processor","dict","get_normalized_songs","set_starred_song_on_state","currentState","songskey","newState","defineProperty","get_shuffled_songs","songToPlayId","processor","getCurrentId","newList","sort","get_ordered_songs","found","_createReducer","artistsReducer_createReducer","normalized_albums","playlistsReducer_createReducer","p","isPlaylistMineByOwner","computeJointDurationOfSongs","removedSongsIds","playlistsWithoutDeleted","currentPlaylist","_payload$playlist","put_songs_in_store","clearCurrentList","normalized_songs","newSongs","songsReducer_createReducer","forEach","authReducer_createReducer","searchReducer_createReducer","albumsReducer_createReducer","curr","artists_albums_by_id","newByIdState","thisAlbum","newAlbumsById","favouritesReducer_createReducer","musicPlayerReducer_createReducer","newIndex","indexOf","newSongsIds","newQueue","newOriginal","idsForDeletion","currentlyPlayingId","newSongsById","newNormalized","list","hasNext","nextIndex","hasPrevious","prevIndex","combineReducers","does_action_contain_alert","createStore","rootReducer","applyMiddleware","thunk","LOAD_ARTISTS_INDEX_SUCCESS","LOAD_ONE_ARTIST_SUCCESS","LOAD_SONGS_OF_ONE_ARTIST_SUCCESS","LOAD_PLAYLISTS_SUCCESS","LOAD_SINGLE_PLAYLIST_SUCCESS","ADD_SONGS_TO_PLAYLIST_RESULT","REMOVE_SONGS_FROM_PLAYLIST_RESULT","DELETE_PLAYLIST_RESULT","EDIT_PLAYLIST_RESULT","ADD_SONGS_TO_QUEUE","PUT_SONGS_IN_QUEUE","PLAY_NEXT_SONG","PLAY_PREVIOUS_SONG","STAR_SONG_RESULT","CLEAR_QUEUE","REMOVE_SONGS_FROM_QUEUE","SEEK_TO_SONG_IN_QUEUE","TOGGLE_SHUFFLE_ON","TOGGLE_SHUFFLE_OFF","LAZY_LOGIN_IGNORE","LOGIN_USER_REQUEST","LOGIN_USER_FAILURE","LOGIN_USER_SUCCESS","LOGOUT_USER","BEGIN_ASYNC_OPERATION","END_ASYNC_OPERATION","SEARCH_RESULT","LOAD_ALBUM_SUCCESS","LOAD_ALBUMS_LIST_SUCCESS","STAR_ALBUM_RESULT","LOAD_FAVOURITES_RESULT","LOAD_SONGS_OF_GENRE_SUCCESS","resolve","sortedArray","_home_shagrath_subplayer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","nameA","toUpperCase","nameB","fixedFilter"],"mappings":"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","file":"static/js/1.2335cb9d.chunk.js","sourcesContent":["\n/* Scrobble Settings */\nconst DEFAULT_IS_SCROBBLING = true\n\nexport function getIsScrobbling() {\n\tconst value = localStorage.getItem('is_scrobbling')\n\treturn value !== null ? value === \"true\" : DEFAULT_IS_SCROBBLING\n}\n\nexport function setIsScrobbling(value) {\n\tlocalStorage.setItem('is_scrobbling', value)\n}\n\n/* Volume Settings */\nconst DEFAULT_VOLUME = 1.0\n\nexport function getVolume() {\n\tconst value = localStorage.getItem('volume')\n\treturn value !== null ? parseFloat(value) : DEFAULT_VOLUME\n}\n\nexport function setVolume(value) {\n\tlocalStorage.setItem('volume', value)\n}\n\n/* Shuffle Settings */\nconst DEFAULT_IS_SHUFFLING = true\n\nexport function getIsShuffleOn() {\n\tconst value = localStorage.getItem('is_shuffling')\n\treturn value !== null ? value === \"true\" : DEFAULT_IS_SHUFFLING\n}\n\nexport function setShuffle(value) {\n\tlocalStorage.setItem('is_shuffling', value)\n}\n\n/* Sidebar settings */\nexport const POSSIBLE_SIDEBAR_LINKS = [\n    {key:\"/latest\" , icon: \"clock-o\", text:\"Recently Added\"},\n    {key:\"/artists\" , icon: \"group\", text:\"Artists\"},\n    {key:\"/album\" , icon: \"th2\", text:\"Albums\"},\n    {key:\"/genres\" , icon: \"venus-mars\", text:\"Genres\"},\n    {key:\"/favourites\" , icon: \"star\", text:\"Favourites\"},\n]\n\nexport function getSidebarDisplaySettings(mobile=false) {\n    // Return all the possible items if the client is a mobile as we assume\n    // they don't take too much space\n    let items = POSSIBLE_SIDEBAR_LINKS\n    if( !mobile ) {\n        // if the client is not mobile, return the filtered items\n        let savedItems = localStorage.getItem('sidebar_settings')\n        if( savedItems !== null) {\n            savedItems = JSON.parse(savedItems)\n            items = POSSIBLE_SIDEBAR_LINKS.filter(item => savedItems.includes(item.key))\n        }\n    }\n    return items\n}\n\nexport function setSidebarDisplaySettings(value) {\n    localStorage.setItem('sidebar_settings', JSON.stringify(value.map(v => v.key)) )\n}","// Use CommonJS require below so we can dynamically import during build-time.\nif (process.env.NODE_ENV === \"production\" || process.env.NODE_ENV === \"test\") {\n    module.exports = require(\"./configureStore.prod\");\n}\nelse {\n    module.exports = require(\"./configureStore.dev\");\n}","module.exports = {\n    // ORANGE\n    lightOrange: {\n        'base-color': '#ff3d00'\n    },\n    darkOrange: {\n        'base-color': '#ff3d00'\n    },\n    // BLUE\n    lightBlue: {\n        'base-color': '#3498ff'\n    },\n    darkBlue: {\n        'base-color': '#3498ff'\n    },\n    // GREEN\n    lightGreen: {\n        'base-color': '#429321'\n    },\n    darkGreen: {\n        'base-color': '#429321'\n    },\n    // GREY\n    lightGrey: {\n        'base-color': '#607d8b'\n    },\n    darkGrey: {\n        'base-color': '#607d8b'\n    },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\n\n// Default configuration\nvar defaults = {\n    host : null,\n    user : null,\n    password : null,\n    version : \"1.9.0\"\n}\n\n// Define utils and helpers\nfunction buildUrl(config, action, params = {}) {\n    var base = `${config.host}/rest/${action}.view?u=${config.user}&p=${config.password}&v=${config.version}&f=json&c=myplayer`\n    // Check if there are multiple valued keys\n    const keys = Object.keys(params)\n    for (var i = keys.length - 1; i >= 0; i--) {\n        const key = keys[i]\n        const value = params[key]\n        if( Array.isArray(value) ) {\n            // If an element has multiple values, add one key for each value\n            base += value.map(val => `&${key}=${encodeURIComponent(val)}`).join(\"\")\n        }\n        else {\n            base += `&${key}=${encodeURIComponent(value)}`\n        }\n    }\n    return base\n}\n\nfunction perform_api_call(url) {\n    return fetch(url)\n        .then(response => {\n            var contentType = response.headers.get('content-type')\n            if(contentType && contentType.includes('application/json')) {\n                return response.json()\n            }\n            return Promise.reject(new Error(`${response.status}, ${response.body}`) )\n        })\n        .then(data => {\n            // Get subsonic response\n            const response = data[\"subsonic-response\"]\n            return response[\"status\"] === \"ok\" ?\n                response :\n                Promise.reject(new Error(`${response.error.message}`))\n        })\n}\n\n// Define main function\nclass Subsonic {\n\n    constructor(config) {\n        this.config = config\n    }\n\n    setConfig(host, username, password, encodePassword = true) {\n        this.config = Object.assign(this.config, {\n            host : host,\n            user : username,\n            password : `enc:${encodePassword ? this.getEncodedPassword(password) : password}`,\n        })\n    }\n\n    login(host, username, password, encodePassword = true) {\n        // Perform call\n        const tempConfig = {\n            host : host,\n            user : username,\n            password : `enc:${encodePassword ? this.getEncodedPassword(password) : password}`,\n            version : \"1.9.0\"\n        }\n        return perform_api_call( buildUrl(tempConfig, \"ping\") )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    getEncodedPassword(password) {\n        let encoded = \"\"\n        for (var i=0; i<password.length; i++) {\n            let hex = password.charCodeAt(i).toString(16);\n            encoded += (hex).slice(-4);\n        }\n        return encoded\n    }\n    \n    getArtists() {\n        return perform_api_call( buildUrl(this.config, \"getArtists\") )\n            .then(result => {\n                return result[\"artists\"][\"index\"]\n            })\n    }\n\n    getArtist(id) {\n        return perform_api_call( buildUrl(this.config, \"getArtist\", {id:id}) )\n            .then(result => {\n                return result[\"artist\"]\n            })\n    }\n\n    getAlbum(id) {\n        return perform_api_call( buildUrl(this.config, \"getAlbum\", {id:id}) )\n            .then(result => {\n                return result[\"album\"]\n            })\n    }\n\n    getAlbumList2(type, extras, offset=0, size=24) {\n        return perform_api_call( buildUrl(this.config, \"getAlbumList2\", {type, size, offset, ...extras}) )\n            .then(result => {\n                return result[\"albumList2\"][\"album\"] || []\n            })\n    }\n\n    getPlaylists() {\n        return perform_api_call( buildUrl(this.config, \"getPlaylists\") )\n            .then(result => {\n                return result[\"playlists\"][\"playlist\"] || []\n            })\n    }\n\n    getPlaylistById(id) {\n        return perform_api_call( buildUrl(this.config, \"getPlaylist\", {id:id}) )\n            .then(result => {\n                return result[\"playlist\"]\n            })\n    }\n\n    getCoverArtUrl(id) {\n        return buildUrl(this.config, \"getCoverArt\", {id:id})\n    }\n\n    getStreamUrl(id) {\n        return buildUrl(this.config, \"stream\", {id:id})\n    }\n\n    getDownloadUrl(id) {\n        return buildUrl(this.config, \"download\", {id:id})\n    }\n\n    addSongsToPlaylist(playlistId, songIds) {\n        return perform_api_call( buildUrl(this.config, \"updatePlaylist\", {playlistId:playlistId, songIdToAdd : songIds}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    removeSongsFromPlaylist(playlistId, songIndexes) {\n        return perform_api_call( buildUrl(this.config, \"updatePlaylist\", {playlistId:playlistId, songIndexToRemove : songIndexes}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    deletePlaylist(playlistId){\n        return perform_api_call( buildUrl(this.config, \"deletePlaylist\", {id:playlistId}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    createPlaylist(name){\n        return perform_api_call( buildUrl(this.config, \"createPlaylist\", {name:name}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    updatePlaylist(id, name, comment, isPublic){\n        return perform_api_call( buildUrl(this.config, \"updatePlaylist\", {playlistId:id, name:name, comment:comment, public:isPublic }) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    search(query) {\n        return perform_api_call( buildUrl(this.config, \"search3\", {query:query, albumCount:24 }) )\n            .then(result => {\n                return result[\"searchResult3\"]\n            })\n    }\n\n    getStarred() {\n        return perform_api_call( buildUrl(this.config, \"getStarred2\") )\n            .then(result => {\n                return result[\"starred2\"]\n            })\n    }\n\n    unstar(ids) {\n        return perform_api_call( buildUrl(this.config, \"unstar\", {id:ids}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    star(ids) {\n        return perform_api_call( buildUrl(this.config, \"star\", {id:ids}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    starAlbums(ids) {\n        return perform_api_call( buildUrl(this.config, \"star\", {albumId:ids}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    unstarAlbums(ids) {\n        return perform_api_call( buildUrl(this.config, \"unstar\", {albumId:ids}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            })\n    }\n\n    getSongsByGenre(genre, offset=0, count=500) {\n        return perform_api_call( buildUrl(this.config, \"getSongsByGenre\", {genre, count, offset}) )\n            .then(result => {\n                return result[\"songsByGenre\"][\"song\"]\n            }) \n    }\n\n    getGenres() {\n        return perform_api_call( buildUrl(this.config, \"getGenres\") )\n            .then(result => {\n                return result[\"genres\"][\"genre\"]\n            }) \n    }\n\n    scrobble(id, time, submission=false) {\n        return perform_api_call( buildUrl(this.config, \"scrobble\", {id, time, submission}) )\n            .then(result => {\n                return result[\"status\"] === \"ok\"\n            }) \n    }\n\n}\n\n// Export instance\nexport default new Subsonic(defaults)","\nexport const ALERT_TYPE_SUCCESS = \"ALERT_TYPE_SUCCESS\"\nexport const ALERT_TYPE_WARNING = \"ALERT_TYPE_WARNING\"\nexport const ALERT_TYPE_ERROR = \"ALERT_TYPE_ERROR\"\n\n/* Functions NOT meant to dispatch actions, only to build the alerts */\nexport function alertSuccessObject(message) {\n  return { alert: { type: ALERT_TYPE_SUCCESS, message: message } }\n}\n\nexport function alertWarningObject(message) {\n  return { alert: { type: ALERT_TYPE_WARNING, message : message } }\n}\n\nexport function alertErrorObject(message) {\n  return { alert: { type: ALERT_TYPE_ERROR, message : message } }\n}\n","import * as types from \"./actionTypes\"\nimport * as alerts from \"./alertsActions\"\n\nexport function beginAsyncTask() {\n  return { type: types.BEGIN_ASYNC_OPERATION }\n}\n\nexport function asyncTaskSuccess(message) {\n  return message ?  { type: types.END_ASYNC_OPERATION, ...alerts.alertSuccessObject(message) } : { type: types.END_ASYNC_OPERATION }\n}\n\nexport function asyncTaskWarning(message) {\n  return message ?  { type: types.END_ASYNC_OPERATION, ...alerts.alertWarningObject(message) } : { type: types.END_ASYNC_OPERATION }\n}\n\nexport function asyncTaskError(message) {\n  return message ?  { type: types.END_ASYNC_OPERATION, ...alerts.alertErrorObject(message) } : { type: types.END_ASYNC_OPERATION }\n}\n","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError, asyncTaskWarning } from \"./apiStatusActions\"\n\n/* Load multiple playlists */\nexport function loadPlaylistsSuccess(playlists) {\n    return { type: types.LOAD_PLAYLISTS_SUCCESS, payload: { playlists : playlists} }\n}\n\nexport function loadPlaylists() {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const playlists = await subsonic.getPlaylists()\n            dispatch(loadPlaylistsSuccess(playlists))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(error.message))\n        }\n    }\n}\n\nexport function addSongsToPlaylistResult(playlistMetadata, songsAdded) {\n    return { type: types.ADD_SONGS_TO_PLAYLIST_RESULT, payload: {playlist: playlistMetadata, songsAdded: songsAdded } }\n}\n\nexport function addSongsToPlaylist(playlistMetadata, songs) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            // Check if there are any songs that already exist in the playlist to prevent duplicates\n            const playlist = await subsonic.getPlaylistById(playlistMetadata.id)\n            const currentSongs = playlist.entry ? new Set(playlist.entry.map(song => song.id)) : new Set()\n            const songsToAdd = songs.filter(song => !currentSongs.has(song.id))\n            // Only add songs that are not in the playlist\n            // If all songs are already in the playlist, don't do anything\n            const songsAdded = songsToAdd.length\n            const songsRequestedToAdd = songs.length\n            if( songsAdded > 0 ) {\n                const result = await subsonic.addSongsToPlaylist(playlist.id, songsToAdd.map(s => s.id))\n                if( result ) {\n                    // Build the success message and dispatch\n                    let msg = `${songsAdded} song(s) added to ${playlistMetadata.name}.`\n                    if( songsAdded !== songs.length ) {\n                        msg += ` ${songs.length - songsAdded} already added.`\n                    }\n                    dispatch(addSongsToPlaylistResult(playlistMetadata, songsToAdd))\n                    dispatch(asyncTaskSuccess(msg))\n                }\n                else {\n                    // Build error message\n                    let msg = `Unable to add ${songsAdded} song(s) to ${playlistMetadata.name}.`\n                    if( songsAdded !== songsRequestedToAdd ) {\n                        msg += ` ${songsRequestedToAdd - songsAdded} already added.`\n                    }\n                    dispatch(asyncTaskError(msg))\n                }\n            }\n            else {\n                // Build warning message saying that there was no need to add anything\n                dispatch(asyncTaskWarning(`All song(s) already in ${playlist.name}`))\n            }\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Unable to add songs to playlist\"))\n        }\n    }\n}\n\nexport function removeSongsFromPlaylistResult(playlist, removedSongs) {\n    return { type: types.REMOVE_SONGS_FROM_PLAYLIST_RESULT, payload:{ playlist: playlist, removedSongs:removedSongs } }\n}\n\nexport function removeSongsFromPlaylist(playlist, songs, songIndexes) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const result = await subsonic.removeSongsFromPlaylist(playlist.id, songIndexes)\n            if( result ) {\n                dispatch(removeSongsFromPlaylistResult(playlist, songs))\n                dispatch(asyncTaskSuccess(`${songIndexes.length} songs removed from ${playlist.name}`))\n            }\n            else {\n                dispatch(asyncTaskError(`Could not remove ${songIndexes.length} songs from ${playlist.name}`))\n            }\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(error.message))\n        }\n    }\n}\n\nexport function deletePlaylistSuccess(playlist) {\n    return { type: types.DELETE_PLAYLIST_RESULT, payload:{ playlist:playlist } }\n}\n\nexport function deletePlaylist(playlist) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const result = await subsonic.deletePlaylist(playlist.id)\n            if( result ) {\n                dispatch(deletePlaylistSuccess(playlist))\n                dispatch(asyncTaskSuccess(`${playlist.name} deleted!`))\n            }\n            else {\n                dispatch(asyncTaskError(`Could not delete ${playlist.name}`))\n            }\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(error.message))\n        }\n    }\n}\n\n\nexport function createPlaylist(name) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const result = await subsonic.createPlaylist(encodeURIComponent(name))\n            // Reload the playlists\n            if( result ) {\n                // We can't directly add to the playlist because Subsonic API doesnt return the ID\n                const playlists = await subsonic.getPlaylists()\n                dispatch(asyncTaskSuccess(`Playlist ${name} was created!`))\n                dispatch(loadPlaylistsSuccess(playlists))\n            }\n            else {\n                dispatch(asyncTaskError(\"Could not create playlist\"))\n            }\n            \n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(error.message))\n        }\n    }\n}\n\nexport function editPlaylistSuccess(id, name, comment, isPublic) {\n    return {type: types.EDIT_PLAYLIST_RESULT, payload: { id:id, name:name, comment:comment, public:isPublic} }\n}\n\nexport function editPlaylist(id, name, comment, isPublic) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const result = await subsonic.updatePlaylist(id, encodeURIComponent(name), encodeURIComponent(comment), isPublic)\n            // Edit playlist in state\n            if( result ) {\n                dispatch(editPlaylistSuccess(id, name, comment, isPublic))\n                dispatch(asyncTaskSuccess(\"Playlist successfully edited\"))\n            }\n            else {\n                dispatch(asyncTaskError(\"Could not edit playlist\"))\n            }\n            \n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Could not edit playlist\"))\n        }\n    }\n}\n\nexport function singlePlaylistLoaded(playlist) {\n    return {type: types.LOAD_SINGLE_PLAYLIST_SUCCESS, payload: {playlist : playlist} }\n}\n\nexport function loadSinglePlaylist(id) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const playlist = await subsonic.getPlaylistById(id)\n            playlist.entry = playlist.entry || [] \n            dispatch(singlePlaylistLoaded(playlist))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Could not load playlist\"))\n        }\n    }\n}","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError } from \"./apiStatusActions\"\n\nexport function searchAction(result) {\n    return { type: types.SEARCH_RESULT, payload:result }\n}\n\nexport function search(query) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const result = await subsonic.search(query)\n            dispatch(searchAction(result))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Unable to perform search\"))\n        }\n    }\n}","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Input, InputGroup, Icon } from 'rsuite'\n\nexport default class SearchBar extends React.PureComponent {\n\n    performSearch = () => {\n        this.props.onSearch && this.props.onSearch(this.query)\n    }\n\n    handleKeyDown = (e) => {\n        if( e.key === \"Enter\" ) {\n            this.performSearch()\n        }\n    }\n\n    render() {\n        return (\n            <InputGroup inside size={this.props.size} style={this.props.style}>\n                <Input id=\"queryBar\" placeholder=\"Search\" onChange={(value => {this.query = value})} onKeyDown={this.handleKeyDown} />\n                <InputGroup.Button id=\"searchButton\" onClick={this.performSearch}><Icon icon=\"search\" /></InputGroup.Button>\n            </InputGroup>\n        )\n    }\n}\n\nSearchBar.propTypes = {\n    size : PropTypes.string,\n    onSearch : PropTypes.func.isRequired\n}\n\nSearchBar.defaultProps = {\n    size : \"lg\",\n}\n","import React from \"react\"\nimport { navigate } from \"@reach/router\"\n// Redux\nimport { connect } from \"react-redux\"\nimport { search } from \"../../redux/actions/searchActions\"\n// UI\nimport SearchBar from './SearchBar'\n\n/* Create a SearchBar connected to the store to automatically perform searches in the App */\nclass HOCSearchBar extends React.Component {\n\n    performSearch = (query) => {\n        if( query ) {\n            this.props.search(query)\n            navigate(\"/search\")\n        }\n    }\n\n    render = () => <SearchBar {...this.props} onSearch={this.performSearch} />\n}\n\nexport default connect(null, { search })(HOCSearchBar)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// Utils\nimport * as settings from \"../../utils/settings.js\"\n// UI\nimport { Button, Icon, Divider, Nav } from 'rsuite'\nimport SearchBar from \"../SearchBar\"\nimport \"./Sidebar.less\"\n\nexport default class Sidebar extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // Check which items to display in the settings\n        this.itemsToDisplay = settings.getSidebarDisplaySettings()\n    }\n\n    showCreatePlaylistModal = () => {\n        this.props.onCreatePlaylistTrigger && this.props.onCreatePlaylistTrigger()\n    }\n\n    onRouteSelected = (route) => {\n        navigate(route)\n    }\n\n    onShowSettings = () => {\n        navigate(\"/settings\")\n    }\n\n    render() {\n        const playlists = this.props.playlists\n        const currentPath = this.props.currentLocation\n        return (\n            <div className=\"subsidebar rs-sidenav-default\" >\n                { /* Search bar */ }\n                <SearchBar />\n                { /* Fixed-to-the-top section */ }\n                <Nav activeKey={currentPath} onSelect={this.onRouteSelected} vertical>\n                    <Nav.Item panel>\n                        <h6 className=\"section-header\">Library</h6>\n                    </Nav.Item>\n                    {\n                        this.itemsToDisplay.map(item => (\n                            <Nav.Item key={item.key} eventKey={item.key} icon={<Icon icon={item.icon} />}>\n                                {item.text}\n                            </Nav.Item>\n                        ))\n                    }\n                    <Nav.Item panel>\n                        <h6 className=\"section-header\">Playlists ({Object.keys(playlists).length})</h6>\n                    </Nav.Item>\n                </Nav>\n                { /* Scrollable playlists */ }\n                <Nav activeKey={currentPath} onSelect={this.onRouteSelected} className=\"playlists-container\" vertical>\n                    {\n                        Object.keys(playlists).map( id =>\n                            <Nav.Item key={id} data-pid={id} eventKey={`/playlist/${id}`} >\n                                {playlists[id].name} ({playlists[id].songCount}) \n                            </Nav.Item>\n                        )\n                    }\n                </Nav>\n                { /* Fixed-to-the-bottom options */ }\n                <Nav activeKey={currentPath} onSelect={this.onRouteSelected} vertical>\n                    <Divider className=\"footer-divider\" />\n                    <Nav.Item panel>\n                        <Button id=\"createPlaylistButton\" appearance=\"ghost\" block={true} onClick={this.showCreatePlaylistModal} >Create new playlist</Button>\n                    </Nav.Item>\n                    <Nav.Item panel>\n                        <Button id=\"settingsButton\" appearance=\"link\" block={true} onClick={this.onShowSettings}>Settings</Button>\n                    </Nav.Item>\n                </Nav>\n            </div>\n        )\n    }\n\n}\n\nSidebar.propTypes = {\n    onCreatePlaylistTrigger : PropTypes.func,\n    playlists : PropTypes.object\n}\n\nSidebar.defaultProps = {\n    playlists : {}\n}\n","import React from \"react\"\nimport { Location } from \"@reach/router\"\n// Redux\nimport { connect } from \"react-redux\"\n// UI\nimport Sidebar from './Sidebar'\n\n/* Create a Sidebar connected to Reach's location provider */\nfunction HOCSidebar(props) {\n    const sidebarProps = props\n    return (\n        <Location>\n            {\n                props => {\n                    // Get the location from reach's <Location/> to highlight the active item\n                    const currentPath = props.location.pathname\n                    return <Sidebar {...sidebarProps} currentLocation={currentPath} />\n                }\n            }\n        </Location>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        \"playlists\" : state.playlists.byId,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(HOCSidebar)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// Utils\nimport * as settings from \"../../utils/settings.js\"\n// UI\nimport {Navbar, Icon, Nav, Dropdown } from 'rsuite'\n\nexport default class MyNavbar extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // Check which items to display in the settings\n        this.itemsToDisplay = settings.getSidebarDisplaySettings(true)\n    }\n\n    onNavSelected = (key) => {\n        switch(key) {\n            case \"newPlaylist\":\n                this.props.onCreatePlaylistTrigger && this.props.onCreatePlaylistTrigger()\n                break\n            default:\n                navigate(key)\n        }\n    }\n\n    render() {\n        const playlists = this.props.playlists\n        const currentPath = this.props.currentLocation\n        return (\n            <Navbar>\n                <Navbar.Body>\n                    <Nav activeKey={currentPath} onSelect={this.onNavSelected}>\n                        <Nav.Item id=\"search\" eventKey=\"/search\" icon={<Icon icon=\"search\" />} />\n                        <Dropdown id=\"library\" title=\"Library\">\n                            {\n                                this.itemsToDisplay.map(item => (\n                                    <Dropdown.Item key={item.key} eventKey={item.key} icon={<Icon icon={item.icon} />}>\n                                        {item.text}\n                                    </Dropdown.Item>\n                                ))\n                            }\n                        </Dropdown>\n                        <Dropdown id=\"playlists\" title=\"Playlists\">\n                            <Dropdown.Item id=\"createPlaylist\" eventKey=\"newPlaylist\" icon={<Icon icon=\"plus\" />} >New playlist</Dropdown.Item>\n                            {Object.keys(playlists).map( id =>\n                                <Dropdown.Item key={id} eventKey={`/playlist/${id}`}>{playlists[id].name} ({playlists[id].songCount})</Dropdown.Item>\n                            )}\n                        </Dropdown>\n                    </Nav>\n                    <Nav activeKey={currentPath} onSelect={this.onNavSelected} pullRight>\n                        <Nav.Item id=\"settings\" eventKey=\"/settings\" icon={<Icon icon=\"cog\" />} />\n                    </Nav>\n                </Navbar.Body>\n            </Navbar>\n        )\n    }\n}\n\nMyNavbar.propTypes = {\n    onCreatePlaylistTrigger : PropTypes.func,\n    playlists : PropTypes.object.isRequired\n}\n\nMyNavbar.defaultProps = {\n    playlists : {}\n}\n","import React from \"react\"\nimport { Location } from \"@reach/router\"\n// Redux\nimport { connect } from \"react-redux\"\n// UI\nimport Navbar from './Navbar'\n\n/* Create a Navbar connected to Reach's location provider */\nfunction HOCNavbar(props) {\n    const navbarProps = props\n    return (\n        <Location>\n            {\n                props => {\n                    // Get the location from reach's <Location/> to highlight the active item\n                    const currentPath = props.location.pathname\n                    return <Navbar {...navbarProps} currentLocation={currentPath} />\n                }\n            }\n        </Location>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        \"playlists\" : state.playlists.byId,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(HOCNavbar)","import * as types from \"./actionTypes\"\nimport * as alerts from \"./alertsActions\"\nimport * as settings from \"../../utils/settings\"\n\nexport function addSongsToQueue(songs) {\n    return { type: types.ADD_SONGS_TO_QUEUE, payload: {songs}, ...alerts.alertSuccessObject(`${songs.length} songs added to the queue!`) }\n}\n\nexport function putSongsInQueue(songs, songToPlay=null) {\n    return { type: types.PUT_SONGS_IN_QUEUE, payload: {songs, songToPlay} }\n}\n\nexport function seekToSongInQueue(song) {\n    return { type: types.SEEK_TO_SONG_IN_QUEUE, payload: {song} }\n}\n\nexport function playNextSong() {\n    return { type: types.PLAY_NEXT_SONG }\n}\n\nexport function playPreviousSong() {\n    return { type: types.PLAY_PREVIOUS_SONG }\n}\n\nexport function clearQueue() {\n    return { type: types.CLEAR_QUEUE }\n}\n\nexport function removeSongsFromQueue(songs) {\n    return { type: types.REMOVE_SONGS_FROM_QUEUE, payload: {songs} }\n}\n\nexport function toggleShuffle(turnOn) {\n\tsettings.setShuffle(turnOn)\n    return { type: turnOn ? types.TOGGLE_SHUFFLE_ON : types.TOGGLE_SHUFFLE_OFF  }\n}\n","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError, asyncTaskWarning } from \"./apiStatusActions\"\n\nexport function favouriteSongsLoaded(favSongs) {\n    return {type: types.LOAD_FAVOURITES_RESULT, payload: {songs : favSongs} }\n}\n\nexport function loadFavouriteSongs() {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const favourites = await subsonic.getStarred()\n            const favSongs = favourites[\"song\"] || []\n            // Set to state\n            dispatch(favouriteSongsLoaded(favSongs))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Could not retrieve favourites\"))\n        }\n    }\n}\n\nexport function starredSongModified(songIds, setStarred) {\n    return { type: types.STAR_SONG_RESULT, payload : { songIds: songIds, starred : setStarred } }\n}\n\nexport function setStarOnSongs(songs, setStarred) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        // We need to remove the songs that are already starred before calling the API.\n        // As song.starred is a string with the date the song was starred,\n        // we need to \"toggle\" it to convert to a boolean\n        const songIds = songs.filter(song => !song.starred === setStarred).map(song => song.id)\n        if( songIds.length === 0 ) {\n            dispatch(asyncTaskWarning(\"All songs are already in favourites\"))\n        }\n        else {\n            try {\n                let result = null\n                let message = null\n                if( setStarred ) {\n                    result = await subsonic.star(songIds)\n                    message = result ? \"Songs added to favs!\" : \"Unable to add songs\"\n                    setStarred = new Date().toISOString()\n                }\n                else {\n                    result = await subsonic.unstar(songIds)   \n                    message = result ? \"Songs removed from favs!\" : \"Unable to remove songs\"\n                }\n                // Dispatch result\n                if( result ) {\n                    dispatch(starredSongModified(songIds, setStarred))\n                    dispatch(asyncTaskSuccess(message))\n                }\n                else {\n                    dispatch(asyncTaskError(message))\n                }\n            }\n            catch(error) {\n                console.error(error)\n                dispatch(asyncTaskError(`Could not change ${songIds.length} songs`))\n            }\n        }\n        \n    }\n}","import { createSelector } from 'reselect'\n\nconst getQueue = (state) => state.musicPlayer.queue\n\nconst getQueueSongs = (state) => state.musicPlayer.songsById\n\nconst getCurrentlyPlayingIndex = (state) => state.musicPlayer.currentSongIndex\n\nconst getCurrentlyPlayingId = (state) => state.musicPlayer.currentSongId\n\nexport const getSongCurrentlyPlayingSelector = createSelector(\n    [getCurrentlyPlayingId, getQueueSongs],\n    (currentId, songs) => songs[currentId]\n)\n\n// Only return the songs pending to be played\nexport const getSongsInQueueSelector = createSelector(\n    [getQueue, getCurrentlyPlayingIndex, getQueueSongs],\n    (queue, currentIndex, songs) => currentIndex !== null ? queue.slice(currentIndex).map( id => songs[id] ) : []\n)","\n// Credit to: https://stackoverflow.com/a/37770048/3835750\nexport function seconds_to_mss(s){\n    let display = \"0:00\"\n    if( !isNaN(s) ) {\n        display = (s-(s%=60))/60+(9<s?':':':0')+s\n    }\n    return display\n}\n\n// Credit to: https://stackoverflow.com/questions/37096367/how-to-convert-seconds-to-minutes-and-hours-in-javascript\nexport function seconds_to_hhmmss(d){\n    let display = \"-\"\n    if( !isNaN(d) ) {\n        d = Number(d)\n        var days = Math.floor(d / (3600*24) )\n        var h = Math.floor(d % (3600*24) / 3600)\n        var m = Math.floor(d % 3600 / 60)\n        // var s = Math.floor(d % 3600 % 60)\n\n        var dDisplay = days > 0 ? days + (days === 1 ? \" day \" : \" days \") : \"\"\n        var hDisplay = h > 0 ? h + (h === 1 ? \" hr \" : \" hrs \") : \"\"\n        var mDisplay = m > 0 ? m + (m === 1 ? \" mins\" : \" mins\") : \"\"\n        // var sDisplay = s > 0 ? s + (s === 1 ? \" s\" : \" s\") : \"\"\n        display = dDisplay + hDisplay + mDisplay \n    }\n    return display\n}\n\nexport const display_starred = (starred) => starred.split(\"T\")[0]","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// Utils\nimport { Howl } from 'howler'\nimport subsonic from \"../../api/subsonicApi\"\nimport { seconds_to_mss } from \"../../utils/formatting.js\"\nimport * as settings from \"../../utils/settings.js\"\n// UI\nimport { IconButton, Icon } from 'rsuite'\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport \"./MusicPlayer.less\"\n/* eslint-disable */\n\nexport default class MusicPlayer extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = { playing:false, tick: 0, isMuted: false, volume: settings.getVolume(),isCastConnected:false, castPlayerState:null, nextSongFromCastQueue: null, song:null, castQueueSongs:[] }\n        this.volumeBeforeMutting = 1.0\n        this.isSeeking = false\n        this.castPlayer = null;\n        this.castPlayerController = null;\n    }\n\n    componentDidMount() {\n        window['__onGCastApiAvailable'] = (isAvailable) => {\n            if (isAvailable && cast) {\n                this.initializeCastPlayer();\n            } else {\n                console.log(\"Was not able to initialize CastPlayer\")\n            }\n        }\n        const script = document.createElement(\"script\");\n        script.src = \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n        script.async = true;\n        document.body.appendChild(script);\n\n        if ('mediaSession' in navigator) {\n\t\t\tnavigator.mediaSession.setActionHandler('previoustrack', this.playPreviousSong);\n\t\t\tnavigator.mediaSession.setActionHandler('nexttrack', this.playNextSong);\n            navigator.mediaSession.setActionHandler('play', this.togglePlayerState);\n            navigator.mediaSession.setActionHandler('pause', this.togglePlayerState);\n\t\t}\n    }\n\n    initializeCastPlayer = () => {\n        var options = {};\n\n        options.receiverApplicationId = 'CC1AD845';\n        options.autoJoinPolicy = chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n        options.androidReceiverCompatible = true;\n        cast.framework.CastContext.getInstance().setOptions(options);\n\n        this.castPlayer = new cast.framework.RemotePlayer();\n        this.castPlayerController = new cast.framework.RemotePlayerController(this.castPlayer);\n\n        this.castPlayerController.addEventListener(\n            cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED,\n            function (e) {\n                var isCastConnected = e.value\n                this.setState({ isCastConnected }, () => {\n                    console.log(\"Chromecast connection: \", isCastConnected)\n                })\n            }.bind(this)\n        );\n\n        this.castPlayerController.addEventListener(\n            cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED,\n            function (e) {\n                console.log(\"Chromecast is \" + e.value)\n                this.setState({ castPlayerState: e.value })\n                if (e.value === \"PAUSED\" && this.state.playing) {\n                    this.setState({ playing: false });\n                } else if (e.value === \"PLAYING\" && !this.state.playing) {\n                    if (!this.state.song && this.castPlayer && this.castPlayer.mediaInfo) {\n                        this.setState({\n                            playing: true,\n                            song: {\n                                id: this.castPlayer.mediaInfo.contentId,\n                                title: this.castPlayer.mediaInfo.metadata.title,\n                                duration: Math.ceil(this.castPlayer.mediaInfo.duration)\n                            }\n                        })\n                        this.streamer = this.cast();\n                    }\n                }\n            }.bind(this)\n        );\n\n        this.castPlayerController.addEventListener(\n            cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED,\n            function () {\n                if (this.castPlayer) {\n                    this.setState({\n                        tick: Math.ceil(this.castPlayer.currentTime)\n                    })\n                }\n            }.bind(this)\n        );\n\n        this.castPlayerController.addEventListener(\n            cast.framework.RemotePlayerEventType.QUEUE_DATA_CHANGED,\n            function () {\n                if (this.castPlayer && this.castPlayer.mediaInfo && this.state.castQueueSongs) {\n                    let nextSongFromCastQueue = this.state.castQueueSongs.find(song => this.castPlayer.mediaInfo.contentId == song.id);\n                    console.log(\"nextSongFromCastQueue \" + nextSongFromCastQueue);\n                    this.setState({\n                        nextSongFromCastQueue: nextSongFromCastQueue\n                    })\n                    if (nextSongFromCastQueue) {\n                        this.props.seekToSongInQueue(nextSongFromCastQueue);\n                    }\n                }\n            }.bind(this)\n        );\n    }\n\n    cast = (songs, prevSongs) => {\n        let reloadQueue = songs && songs != prevSongs && songs.some(song => !prevSongs.some(prevSong => prevSong.id == song.id));\n        if (reloadQueue || (songs && !this.state.nextSongFromCastQueue)) {\n            let request = new chrome.cast.media.QueueLoadRequest(songs.map(song => {\n                let mediaInfo = new chrome.cast.media.MediaInfo(song.id, 'audio/mp3')\n                mediaInfo.contentUrl = subsonic.getStreamUrl(song.id);\n\n                mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n                mediaInfo.duration = song.duration;\n                mediaInfo.metadata = new chrome.cast.media.MusicTrackMediaMetadata();\n                mediaInfo.metadata.title = song.title;\n                mediaInfo.metadata.artist = song.artist;\n                mediaInfo.metadata.albumName = song.album;\n                if (song.coverArt) {\n                    mediaInfo.metadata.images = [ new chrome.cast.Image(subsonic.getCoverArtUrl(song.coverArt)) ];\n                }\n                return new chrome.cast.media.QueueItem(mediaInfo);\n            }));\n\n            var session = cast.framework.CastContext.getInstance().getCurrentSession()\n            if (session) {\n                session.getSessionObj().queueLoad(request, () => {\n                    console.log(\"Queue cast is loaded\")\n                }, (e) => {\n                    console.log(e)\n                })\n            } else {\n                console.log(\"No cast session is available\");\n            }\n        }\n        this.setState({\n            nextSongFromCastQueue: null,\n            castQueueSongs: songs && songs.length > 0 ? songs.slice(1) : []\n        })\n        return {\n            play: () => {\n                var session = cast.framework.CastContext.getInstance().getCurrentSession()\n                if (session && this.state.castPlayerState != 'PLAYING') {\n                    console.log(\"CAST PLAY\");\n                    this.castPlayerController.playOrPause();\n                }\n            },\n            pause: () => {\n                var session = cast.framework.CastContext.getInstance().getCurrentSession()\n                if (session && this.state.castPlayerState == 'PLAYING') {\n                    console.log(\"CAST PAUSE\");\n                    this.castPlayerController.playOrPause();\n                }\n            },\n            stop: () => {\n                var session = cast.framework.CastContext.getInstance().getCurrentSession()\n                if (session && !this.state.castQueueSongs) {\n                    console.log(\"CAST STOP\");\n                    this.castPlayer.currentTime = 0;\n                    this.castPlayerController.seek();\n                    this.castPlayerController.stop();\n                }\n            },\n            seek: (seekTime) => {\n                var session = cast.framework.CastContext.getInstance().getCurrentSession()\n                if (session) {\n                    if (seekTime == undefined) {\n                        return this.castPlayer.currentTime;\n                    }\n                    this.castPlayer.currentTime = seekTime;\n                    this.castPlayerController.seek();\n                }\n            },\n            unload: () => {\n                \n            },\n            volume: (newVolume) => {\n                var session = cast.framework.CastContext.getInstance().getCurrentSession()\n                if (session) {\n                    this.castPlayer.volumeLevel = newVolume;\n                    this.castPlayerController.setVolumeLevel();\n                }\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        // Check if there is a song to play\n        if( this.props.song ) {\n            var playNextSong = this.props.playNextSong\n            var previousSong = prevProps.song ? prevProps.song : {}\n            if( this.props.song.id !== previousSong.id) {\n                const shouldScrobble = settings.getIsScrobbling()\n                // Stop the current song if playing\n                this.clearMusicPlayer()\n                // Mark the previous song as submitted if it was played enough to scrobble\n                if( shouldScrobble && this.isTickingEnoughToScrobble(previousSong, this.state.tick) ) {\n                    subsonic.scrobble(previousSong.id, Date.now(), true)\n                }\n                // Stop the previous song to prevent both songs to play at the same time\n                const newSong = this.props.song\n                if (this.state.isCastConnected) {\n                    this.streamer = this.cast(this.props.songs, prevProps.songs);\n                } else {\n                    this.streamer = new Howl({\n                        src: [subsonic.getStreamUrl(newSong.id)],\n                        ext: ['mp3'],\n                        preload: false,\n                        pool: 2,\n                        autoplay: true,\n                        html5: true,\n                        volume: this.state.volume,\n                        // Play next song\n                        onend: function() {\n                            playNextSong()\n                        }\n                    })\n                }\n                this.streamer.play()\n                this.startSongTicker()\n                this.isSeeking = false\n                this.setState({playing : true, tick: 0})\n                // Update title\n                document.title = `${newSong.title} - ${newSong.artist}`\n                // Scrobble\n                shouldScrobble && subsonic.scrobble(newSong.id, Date.now(), false)\n            }\n        }\n        // If there is no song to play, stop whatever was playing\n        else {\n            this.clearMusicPlayer()\n            // Update title\n            document.title = \"SubPlayer\"\n        }\n    }\n\n    startSongTicker() {\n        clearInterval(this.timerID)\n        this.timerID = setInterval(() => {\n            if( this.state.playing ) {\n                this.tick()\n            }\n        }, 1000)\n    }\n\n    tick() {\n        if( !this.isSeeking ) {\n            this.setState({\n                tick: Math.ceil(this.streamer.seek())\n            })\n        }\n    }\n\n    isTickingEnoughToScrobble(song, tick) {\n        /* https://www.last.fm/api/scrobbling#when-is-a-scrobble-a-scrobble\n         * Send scrobble if:\n         * 1. if the song is longer than 30 seconds AND\n         * 2. the song was played for at least 50% of its length OR\n         * 3. the song was played for at least 4 minutes\n         */\n        const duration = song.duration\n        return duration > 30 && (tick >= .5*duration || tick >= 4*60 )\n    }\n\n    onSeeking = (value) => {\n        if( this.streamer ) {\n            this.isSeeking = true\n            this.setState({tick: value})\n        }\n    }\n\n    onSeekingStopped = (value) => {\n        if( this.isSeeking ) {\n            this.isSeeking = false\n            this.streamer.seek(value)\n            this.setState({tick: value})\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n        // Stop the current song if playing\n        this.clearMusicPlayer()\n    }\n\n    changeVolume = (newVolume) => {\n        this.streamer && this.streamer.volume(newVolume)\n        this.setState({volume: newVolume})\n        this.volumeBeforeMutting = newVolume\n        // update settings\n        settings.setVolume(newVolume)\n    }\n\n    toggleMute = () => {\n        const isMuted = this.state.isMuted\n        if( isMuted ) {\n            this.streamer && this.streamer.volume(this.volumeBeforeMutting)\n            this.setState({ volume : this.volumeBeforeMutting, isMuted: false })\n        }\n        else {\n            this.streamer && this.streamer.volume(0.0)\n            this.setState({ volume : 0.0, isMuted: true })\n        }\n    }\n\n    togglePlayerState = () => {\n        if( this.streamer ) {\n            if(this.state.playing) {\n                this.streamer.pause()\n            }\n            else {\n                this.streamer.play()\n            }\n            this.setState({ playing : !this.state.playing })\n        }\n    }\n\n    toggleStarOnSong = () => {\n        if( this.props.song && this.props.setStarOnSongs ){\n            this.props.setStarOnSongs([this.props.song], !this.props.song.starred)\n        }\n    }\n\n    toggleShuffle = () => {\n        this.props.toggleShuffle(!this.props.isShuffleOn)\n    }\n\n    goToQueueView = () => {\n        navigate(\"/queue/\")\n    }\n\n    goToArtist = (artistId) => {\n        navigate(`/artists/${artistId}`)\n    }\n\n    goToAlbum = (albumId) => {\n        if( albumId ) {\n            navigate(`/album/${albumId}`)\n        }\n    }\n\n    playNextSong = () => {\n        this.props.playNextSong && this.props.playNextSong()\n    }\n\n    playPreviousSong = () => {\n        // if the song has just started (according to a defined threshold), play\n        // the previous song. If not, go back to the beginning of this song\n        if( this.state.playing ) {\n            const currentSeconds = this.streamer ? this.streamer.seek() : 0\n            if( currentSeconds <= 3 ) {\n                this.props.playPreviousSong && this.props.playPreviousSong()\n            }\n            else {\n                this.streamer.seek(0)\n                this.tick()\n            }\n        }\n    }\n\n    clearMusicPlayer = () => {\n        if( this.streamer ) {\n            this.streamer.stop()\n            this.streamer.unload()\n        }\n        clearInterval(this.timerID)\n        // \"Reset\" UI\n        this.state.playing && !this.state.song && this.setState({playing : false, tick: 0})\n    }\n\n    render () {\n        const song = this.props.song ? this.props.song : (this.state.song ? this.state.song : {})\n        const playing = this.state.playing\n        const seek = this.state.tick\n        const starIcon = song.starred ? \"star\" : \"star-o\"\n        const volume = this.state.volume\n        const isShuffleOn = this.props.isShuffleOn\n        return (\n            <div className=\"music-player\">\n                {/* Currently playing information */}\n                <div className=\"song_metadata_container\">\n                    <img id=\"song_album\" src={song.coverArt ? subsonic.getCoverArtUrl(song.coverArt) : \"/currently_placeholder.png\"} alt=\"cover\" width=\"45\" height=\"45\" onClick={e => this.goToAlbum(song.albumId)}/>\n                    <div style={{overflow:\"hidden\"}}>\n                        <p id=\"song_name\"><b>{song.title}</b></p>\n                        <span id=\"song_artist\" className=\"artist-link\" onClick={e => this.goToArtist(song.artistId)}>{song.artist}</span>\n                    </div>\n                    <IconButton id=\"star_button\" icon={<Icon icon={starIcon} />} onClick={this.toggleStarOnSong} appearance=\"link\" size=\"lg\"/>\n                </div>\n                {/* Music player controls */}\n                <div className=\"currently_playing_controls\">\n                    <IconButton id=\"previous_button\" icon={<Icon icon=\"step-backward\" />} appearance=\"link\" size=\"sm\" onClick={this.playPreviousSong}/>\n                    <IconButton id=\"play_pause_button\" appearance=\"primary\" icon={<Icon icon={playing ? \"pause\" : \"play\"} />} circle size=\"sm\" onClick={this.togglePlayerState} />\n                    <IconButton id=\"next_button\" icon={<Icon icon=\"step-forward\" />} appearance=\"link\" size=\"sm\" onClick={this.playNextSong} />\n                </div>\n                {/* Song seeking controls */}\n                <div style={{flexGrow:1}} className=\"rs-hidden-xs\">\n                    <div className=\"song_progress_bar_container\">\n                        <span>{seconds_to_mss(seek)}</span>\n                        <Slider className=\"rs-slider song_progress_bar\" value={seek} onChange={this.onSeeking} onAfterChange={this.onSeekingStopped} max={song.duration || 0} />\n                        <span>{seconds_to_mss(song.duration || 0)}</span>\n                    </div>\n                </div>\n                {/* Toggle shuffle */}\n                <div className=\"shuffle_container\">\n                    <IconButton id=\"shuffle_button\" icon={<Icon icon=\"random\" inverse={!isShuffleOn} />} onClick={this.toggleShuffle} appearance=\"link\" size=\"lg\"/>\n                </div>\n                {/* Go to queue */}\n                <div className=\"go_to_queue_container\">\n                    <IconButton id=\"queue_button\" icon={<Icon icon=\"bars\" />} onClick={this.goToQueueView} appearance=\"link\" size=\"lg\"/>\n                </div>\n                <div className=\"chromecast-icon\">\n                    <google-cast-launcher id=\"castbutton\"></google-cast-launcher>\n                </div>\n                {/* Volume controls */}\n                <div className=\"rs-hidden-xs\">\n                    <div className=\"volume_controls_container\">\n                        <IconButton id=\"mute\" onClick={this.toggleMute} icon={<Icon className=\"volume_control_mute\" icon={volume === 0 ? 'volume-off' : 'volume-up'} />} appearance=\"link\" />\n                        <Slider className=\"volume_control_bar\" value={volume} onChange={this.changeVolume} defaultValue={1} max={1} step={0.05} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nMusicPlayer.propTypes = {\n    playNextSong : PropTypes.func,\n    playPreviousSong : PropTypes.func,\n    seekToSongInQueue: PropTypes.func,\n    setStarOnSongs : PropTypes.func,\n    toggleShuffle : PropTypes.func,\n    song : PropTypes.object,\n    isShuffleOn: PropTypes.bool,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { playNextSong, playPreviousSong, seekToSongInQueue, toggleShuffle } from \"../../redux/actions/songsActions\"\nimport { setStarOnSongs } from \"../../redux/actions/favouritesActions\"\nimport { getSongsInQueueSelector, getSongCurrentlyPlayingSelector } from '../../redux/selectors/musicPlayerSelector'\n// UI\nimport MusicPlayer from './MusicPlayer'\n\nconst mapStateToProps = (state) => {\n    return {\n        \"song\" : getSongCurrentlyPlayingSelector(state),\n        \"songs\" : getSongsInQueueSelector(state),\n        \"isShuffleOn\": state.musicPlayer.isShuffleOn,\n    }\n}\n\nconst mapDispatchToProps = { playNextSong, playPreviousSong, seekToSongInQueue, setStarOnSongs, toggleShuffle }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MusicPlayer)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport \"./InfiniteLineLoader.less\"\n\nfunction InfiniteLineLoader(props) {\n    const display = props.isLoading ? \"initial\" : \"none\"\n    return (\n        <div className=\"loader\" style={{display: display, position: \"absolute\"}}/>\n    )\n}\n\nInfiniteLineLoader.propTypes = {\n    isLoading : PropTypes.bool\n}\n\nInfiniteLineLoader.defaultProps = {\n    isLoading : false\n}\n\nexport default InfiniteLineLoader","import InfiniteLineLoader from \"./InfiniteLineLoader\"\n\nexport default InfiniteLineLoader","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError } from \"./apiStatusActions\"\n\n/* Load multiple artists */\nexport function loadArtistsSuccess(artists) {\n    return { type: types.LOAD_ARTISTS_INDEX_SUCCESS, payload: {artistsIndex: artists} }\n}\n\nexport function loadArtists() {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const artists = await subsonic.getArtists()\n            dispatch(loadArtistsSuccess(artists))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Could not load artists\"))\n        }\n    }\n}\n\n/* Load songs of just one artist */\nexport const loadSongsOfArtistSuccess = songs => ({type : types.LOAD_SONGS_OF_ONE_ARTIST_SUCCESS, payload: { songs : songs} })\n\nasync function loadSongsOfArtist(artist) {\n    // Create a \"big\" promise to fetch all albums and return\n    // just one result with all the content\n    return Promise.all( artist.album.map(album => subsonic.getAlbum(album.id)) )\n        .then(response => {\n            // Combine all the songs in one single result\n            return response.reduce( (accum, current) => accum.concat(current.song), [] )\n        })\n}\n\n/* Load information of one artist along with its songs */\n\nexport const loadOneArtistSuccess = artist => ({type: types.LOAD_ONE_ARTIST_SUCCESS, payload : {artist: artist}})\n\nexport function loadOneArtist(artistId) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const artist = await subsonic.getArtist(artistId)\n            dispatch(loadOneArtistSuccess(artist))\n            dispatch(asyncTaskSuccess())\n            // Now load all its songs\n            dispatch(beginAsyncTask())\n            const songs = await loadSongsOfArtist(artist)\n            dispatch(loadSongsOfArtistSuccess(songs))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Unable to load artist\"))\n        }\n    }\n}","import { createSelector } from 'reselect'\n\nconst getArtistsByIndex = (state) => state.artists.byIndex\n\n// Returns the artists.byIndex element in a flat list with its headers\nexport const getArtistsWithHeaders = createSelector(\n\tgetArtistsByIndex,\n    artists => artists\n    \t.reduce( (accum, current) => accum.concat( [ {header: current.name}, ...current.artist] ), [] )\n)\n","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// UI\nimport \"./ArtistListElement.less\"\nimport { Icon, Col } from 'rsuite'\n\nexport default class ArtistListElement extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        let shouldReRender = true\n        // Avoid re-rendering if the current artist playing didnt change\n        if( nextProps.currentSongPlaying !== null &&\n            nextProps.currentSongPlaying.id !== this.props.currentSongPlaying.id ) {\n            // Check if this artists needs to be re-rendered\n            const nextArtistId = nextProps.currentSongPlaying.artistId\n            const currentArtistId = this.props.currentSongPlaying.artistId\n            shouldReRender = false\n            // Check if this artist used to have it and now it doesnt\n            if( this.props.artist.id === currentArtistId && this.props.artist.id !== nextArtistId ) {\n                shouldReRender = true\n            }\n            // Check if this artist used not to be here and now it does\n            if( this.props.artist.id !== currentArtistId && this.props.artist.id === nextArtistId ) {\n                shouldReRender = true\n            }\n        }\n        return shouldReRender\n    }\n    \n    render() {\n        const currentArtistPlayingId = this.props.currentSongPlaying && this.props.currentSongPlaying.artistId\n        const artist = this.props.artist\n        return (\n            <Col id=\"name\" sm={8} xs={12} className={currentArtistPlayingId === artist.id ? \"link_to_artist currently-playing\" : \"link_to_artist\"} onClick={ (e) => {navigate(\"/artists/\"+artist.id)} }>\n                {artist.name} <Icon icon='volume-up' />\n            </Col>\n        )\n    }\n}\n\nArtistListElement.propTypes = {\n    currentSongPlaying : PropTypes.object,\n    artist : PropTypes.object,\n}\n\nArtistListElement.defaultProps = {\n    currentSongPlaying : {},\n    artist : {}\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { getSongCurrentlyPlayingSelector } from '../../redux/selectors/musicPlayerSelector'\n// UI\nimport ArtistListElement from './ArtistListElement'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        currentSongPlaying : getSongCurrentlyPlayingSelector(state),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(ArtistListElement)","import React from \"react\"\n// UI\nimport { Col } from 'rsuite'\n\nfunction ArtistListLoader(props) {\n    return (\n    \t<Col key=\"loading\" sm={24} xs={24} > Loading... </Col>\n    )\n}\n\nexport default ArtistListLoader","// UI\nimport ArtistListLoader from './ArtistListLoader'\n\nexport default ArtistListLoader","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Col } from 'rsuite'\n\nfunction ArtistListHeader(props) {\n    const { name } = props\n    return (\n    \t<Col sm={24} xs={24} >\n\t        <h4 id=\"title\" className=\"artist-header\">{name}</h4>\n        </Col>\n    )\n}\n\nArtistListHeader.propTypes = {\n    name : PropTypes.string\n}\n\nexport default ArtistListHeader","// UI\nimport ArtistListHeader from './ArtistListHeader'\n\nexport default ArtistListHeader","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport ArtistElement from \"../ArtistListElement\"\nimport ArtistLoader from \"../ArtistListLoader\"\nimport InfiniteScroll from 'react-infinite-scroller'\nimport ArtistHeader from \"../ArtistListHeader\"\n\n/* Define each page with (around) pageSize elements.\n * This will be just an estimated value, as the final value (to keep UI consistency)\n * must be calculated as a multiple of 2 (for small screens) and 3 (for bigger screens)\n */\nexport function getNextArtists(elementsRendered, artists, pageSize=50) {\n    // Render the next ~pageSize elements\n    let toAdd = []\n    let artistsAddedInLastSection = 0\n    let keepAdding = true\n    do {\n        const elementsAdded = toAdd.length\n        const indexToAdd = elementsRendered + elementsAdded\n        // Add the correct UI type to the list\n        const elementToAdd = artists[indexToAdd]\n        toAdd.push( elementToAdd.header ? <ArtistHeader key={elementToAdd.header} name={elementToAdd.header} /> : <ArtistElement key={elementToAdd.id} artist={elementToAdd} /> )\n        /* Update the amount of artists added under the last header. If the new element is a header, this counter\n         * should be restarted */\n        artistsAddedInLastSection = elementToAdd.header ? 0 : artistsAddedInLastSection + 1\n        /*  We should stop adding artists when:\n         *  (there are no more elements to add) OR (the amount of artists added is multiple of 2 and 3 above pageSize) */\n        if( indexToAdd === (artists.length-1) ||\n            (elementsAdded >= pageSize && artistsAddedInLastSection % 2 === 0 && artistsAddedInLastSection % 3 === 0) ) {\n            keepAdding = false\n        }\n    }\n    while(keepAdding)\n    return toAdd\n}\n\nexport class ArtistsList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const hasArtistsToRender = this.props.artists !== null && this.props.artists.length > 0\n        this.state = {artistsToDisplay : [], hasMoreToLoad : hasArtistsToRender }\n        // This will keep a count on how many elements are already rendered\n        this._elementsRendered = 0\n    }\n    \n    componentDidMount() {\n        if( this.props.artists.length === 0 ) {\n            this.props.loadArtists()\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if( prevProps.artists.length === 0 && this.props.artists.length > 0 ) {\n            this.setState({hasMoreToLoad : true})\n        }\n    }\n\n    displayMoreArtists = page => {\n        const toAdd = getNextArtists(this._elementsRendered, this.props.artists)\n        // Update state\n        this._elementsRendered += toAdd.length\n        this.setState({\n            artistsToDisplay : this.state.artistsToDisplay.concat(toAdd),\n            // There will be more elements to load if the list of artists is not over yet\n            hasMoreToLoad : this._elementsRendered < this.props.artists.length\n        })\n    }\n\n    render() {\n        return (\n            <div style={{padding:\"20px\", display:\"flex\", flexDirection:\"column\", height:\"100%\", overflow:\"auto\"}}>\n                <h1 style={{marginBottom:\"45px\" }}>All artists</h1>\n                <InfiniteScroll\n                    pageStart={0}\n                    loadMore={this.displayMoreArtists}\n                    hasMore={this.state.hasMoreToLoad}\n                    loader={<ArtistLoader key=\"loader\" />}\n                    useWindow={false}>\n                    {this.state.artistsToDisplay}\n                </InfiniteScroll>\n            </div>\n        )\n    }\n}\n\nArtistsList.propTypes = {\n    artists : PropTypes.array,\n    loadArtists : PropTypes.func.isRequired\n}\n\nArtistsList.defaultProps = {\n    artists : [],\n    loadArtists : () => (null)\n}","// Redux\nimport { connect } from \"react-redux\"\nimport { loadArtists } from \"../../redux/actions/artistsActions\"\nimport { getArtistsWithHeaders } from \"../../redux/selectors/artistSelectors\"\n// UI\nimport {ArtistsList} from './ArtistsList'\n\nconst mapStateToProps = (state) => {\n    return {\n        artists: getArtistsWithHeaders(state),\n    }\n}\n\nconst mapDispatchToProps = { loadArtists }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ArtistsList)","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError, asyncTaskWarning } from \"./apiStatusActions\"\n\n/* Load one album at a time */\nexport function loadAlbumSuccess(album) {\n    return { type: types.LOAD_ALBUM_SUCCESS, payload: { album: album } }\n}\n\nexport function loadAlbum(albumId) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const album = await subsonic.getAlbum(albumId)\n            dispatch(loadAlbumSuccess(album))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Unable to load album\"))\n        }\n    }\n}\n\nexport function starredAlbumModified(albumIds, setStarred) {\n    return { type: types.STAR_ALBUM_RESULT, payload : { albumIds: albumIds, starred : setStarred } }\n}\n\nexport function setStarOnAlbums(albums, setStarred) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        // We need to remove the albums that are already starred before calling the API.\n        // As song.starred is a string with the date the song was starred,\n        // we need to \"toggle\" it to convert to a boolean\n        const albumIds = albums.filter(album => !album.starred === setStarred).map(album => album.id)\n        if( albumIds.length === 0 ) {\n            dispatch(asyncTaskWarning(\"All albums are already starred\"))\n        }\n        else {\n            try {\n                let result = null\n                let message = null\n                if( setStarred ) {\n                    result = await subsonic.starAlbums(albumIds)\n                    message = result ? \"Albums added to favs!\" : \"Unable to star albums\"\n                    setStarred = new Date().toISOString()\n                }\n                else {\n                    result = await subsonic.unstarAlbums(albumIds)   \n                    message = result ? \"Albums removed from favs!\" : \"Unable to unstar albums\"\n                }\n                // Dispatch result\n                if( result ) {\n                    dispatch(starredAlbumModified(albumIds, setStarred))\n                    dispatch(asyncTaskSuccess(message))\n                }\n                else {\n                    dispatch(asyncTaskError(message))\n                }\n            }\n            catch(error) {\n                console.error(error)\n                dispatch(asyncTaskError(`Could not change ${albumIds.length} albums`))\n            }\n        }\n    }\n}\n\nexport function albumListLoaded(albums) {\n    return { type: types.LOAD_ALBUMS_LIST_SUCCESS, payload : { albums: albums } }\n}\n\nexport function loadAlbums(filter, values, page, pageSize=24) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        // Search with the subsonic API for the matching albums\n        try {\n            const albums = await subsonic.getAlbumList2(filter, values, page*pageSize, pageSize)\n            dispatch(albumListLoaded(albums.reverse()))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(`Could not load '${filter}' albums`))\n        }\n    }\n}","import { createSelector } from 'reselect'\n\nconst getAlbums = (state) => Object.keys(state.albums.byId).map(id => state.albums.byId[id])\n\nconst getArtistIdFromProps = (state, props) => props.artistId\n\nexport const getAlbumsOfArtist = createSelector(\n    [ getArtistIdFromProps, getAlbums ],\n    (artistId, albums) => {\n        return albums.filter(album => album.artistId === artistId)\n    }\n)\n\nexport const albumsSelector = createSelector(\n    [getAlbums],\n    albums => albums\n)\n","import React from 'react'\nimport { navigate } from \"@reach/router\"\nimport PropTypes from 'prop-types'\n\nimport { Icon, Badge } from 'rsuite'\nimport subsonic from \"../../api/subsonicApi\"\n\nimport \"./SearchAlbumResult.less\"\n\nexport default function SearchAlbumResult(props) {\n    const {album, showYear} = props\n    return (\n        <div className=\"link_to_album\" style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", textAlign:\"center\"}} onClick={ (e) => {navigate(\"/album/\"+album.id)} }>\n            <Badge content={album.starred ? <Icon icon='star' /> : false}>\n                <div style={{ width: 150, height: 150, display: 'inline-block'}}>\n                    <img alt=\"\" src={album.coverArt ? subsonic.getCoverArtUrl(album.coverArt) : \"album_placeholder.jpg\"} width=\"150\" />\n                </div>\n            </Badge>\n            <p data-key=\"description\">\n                <strong>{album.name}</strong><br/>\n                {album.artist}\n                { showYear && ` (${album.year})` }\n            </p>\n        </div>\n    )\n}\n\nSearchAlbumResult.propTypes = {\n    album : PropTypes.object.isRequired,\n    showYear: PropTypes.bool\n}\n\nSearchAlbumResult.defaultProps = {\n    showYear: false\n}","import SearchAlbumResult from './SearchAlbumResult'\n\nexport default SearchAlbumResult","import React, {useState, useEffect} from \"react\"\nimport PropTypes from 'prop-types'\n// utils\nimport subsonic from \"../../api/subsonicApi\"\nimport {SelectPicker } from 'rsuite'\n\nexport default function GenresPicker(props) {\n    const {beginAsyncTask, asyncTaskSuccess, asyncTaskError, onGenreChanged, displaySongCount, ...rest} = props\n    const [genres, setGenres] = useState([])\n\n    // Get the available genres\n    useEffect(() => {\n        const getGenres = async () => {\n            // Get the available genres\n            beginAsyncTask()\n            try {\n                const result = await subsonic.getGenres()\n                asyncTaskSuccess()\n                setGenres( result.map(g => ({label:`${g.value} (${displaySongCount ? g.songCount : g.albumCount})`, value:g})) )\n            }\n            catch(err) {\n                console.log(err)\n                asyncTaskError(\"Unable to get genres\")\n            }\n        }\n        getGenres()\n    }, [beginAsyncTask, asyncTaskSuccess, asyncTaskError, displaySongCount, setGenres])\n\n    // Notify when the value has changed\n    const onValueChanged = (genre) => onGenreChanged(genre)\n\n    return (\n        <SelectPicker {...rest} id=\"genrePicker\" placeholder=\"Select genre\" onChange={onValueChanged} data={genres} cleanable={false} />\n    )\n}\n\nGenresPicker.propTypes = {\n    beginAsyncTask: PropTypes.func,\n    asyncTaskSuccess: PropTypes.func,\n    asyncTaskError: PropTypes.func,\n    onGenreChanged: PropTypes.func,\n    displaySongCount: PropTypes.bool\n}\n\nGenresPicker.defaultProps = {\n    beginAsyncTask: ()=> null,\n    asyncTaskSuccess: ()=> null,\n    asyncTaskError: ()=> null,\n    onGenreChanged: ()=> null,\n    displaySongCount: false,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport {beginAsyncTask, asyncTaskSuccess, asyncTaskError } from \"../../redux/actions/apiStatusActions\"\n// UI\nimport GenresPicker from './GenresPicker'\n\nconst mapDispatchToProps = { beginAsyncTask, asyncTaskSuccess, asyncTaskError }\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(GenresPicker)","// UI\nimport AlbumsListFilter from './AlbumsListFilter'\n\nexport default AlbumsListFilter","import React, {useState} from \"react\"\n// UI\nimport {RadioGroup, Radio, InputNumber, Button, Alert } from 'rsuite'\nimport GenresPicker from \"../GenresPicker\"\n\nexport default function AlbumsListFilter(props) {\n    // Filter details\n    const [yearFrom, setYearFrom] = useState(null)\n    const [yearTo, setYearTo] = useState(null)\n\n    // Filters selection\n    const [filter, setFilter] = useState(\"newest\")\n\n    // Change the settings when the radio option has changed\n    function onRadioChanged(value) {\n        setFilter(value)\n        // Show the years input\n        if( value !== \"byYear\" && value !== \"byGenre\") {\n            props.onFilterChanged({ filter: value })\n        }\n    }\n\n    // On genre changed\n    function onGenreChanged(genre) {\n        if( genre !== null) {\n            props.onFilterChanged({ filter: filter, genre:genre.value })\n        }\n    }\n\n    // WHen the search button is pressed\n    function onSearch() {\n        if( filter === \"byYear\") {\n            if( yearFrom === null || yearTo === null ) {\n                Alert.warning(\"Both year values are required\")\n            }\n            else {\n                props.onFilterChanged({ filter: filter, from: yearFrom, to: yearTo })\n            }\n        }\n    }\n\n    // render\n    const showYears = filter === \"byYear\"\n    const showGenres = filter === \"byGenre\"\n    return (\n        <div style={{display:\"inline-flex\", flexWrap:\"wrap\"}}>\n            <RadioGroup id=\"filterSelection\"  defaultValue={filter} onChange={onRadioChanged} inline appearance=\"picker\">\n                <Radio value=\"random\">Random</Radio>\n                <Radio value=\"newest\">Newest</Radio>\n                <Radio value=\"frequent\">Frequent</Radio>\n                <Radio value=\"recent\">Recent</Radio>\n                <Radio value=\"starred\">Starred</Radio>\n                <Radio value=\"alphabeticalByName\">By Name</Radio>\n                <Radio value=\"alphabeticalByArtist\">By Artist</Radio>\n                <Radio value=\"byYear\">By Year</Radio>\n                <Radio value=\"byGenre\">By Genre</Radio>\n            </RadioGroup>\n            {showGenres && <GenresPicker id=\"genrePicker\" onGenreChanged={onGenreChanged} style={{ width: 150, marginLeft:\"10px\"}} /> }\n            {showYears && <InputNumber id=\"yearFrom\" onChange={val => setYearFrom(val)} placeholder=\"from\" style={{ width: 80, marginLeft:\"10px\"}}/> }\n            {showYears && <InputNumber id=\"yearTo\" onChange={val => setYearTo(val)} placeholder=\"to\" style={{ width: 80, marginLeft:\"10px\"}}/> }\n            {showYears && <Button id=\"yearSearch\" style={{marginLeft:\"10px\"}} onClick={onSearch}>Search</Button>}\n        </div>\n    )\n}\n","import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Grid, Row, Col, Loader, Button, ButtonGroup } from 'rsuite'\nimport AlbumResult from \"../SearchAlbumResult\"\nimport AlbumsListFilter from \"../AlbumsListFilter\"\n\nexport const NavigationButtons = (props) => {\n    const {page, onPrevious, onNext, disableNext, ...rest} = props\n    return (\n        <ButtonGroup style={{float:\"right\", marginRight:\"15px\"}} {...rest}>\n            <Button onClick={onPrevious} disabled={page === 0} >\n                Previous\n            </Button>\n            <Button onClick={onNext} disabled={disableNext} >\n                Next\n            </Button>\n        </ButtonGroup>\n    )\n}\n\nexport function AlbumsList(props) {\n    const {albums, loadAlbums} = props\n    // filters\n    const [filtering, setFiltering] = useState({filter:\"newest\", page:0})\n    const [loading, setLoading] = useState(true)\n    // next button control\n    const [disableNext, setNextDisabled] = useState(false)\n\n    // Start loading albums\n    useEffect(() => {\n        const {filter, page, ...rest} = filtering\n        setLoading(true)\n        loadAlbums(filter, rest, page)\n    }, [filtering, loadAlbums])\n\n    // Update loader when albums are ready\n    useEffect(() => {\n        setLoading(false)\n        // disable the next button if no more albums are available. 24 albums\n        // are showed per page\n        setNextDisabled(albums.length < 24)\n    }, [albums])\n\n    // When a filter changes, reset everything\n    const setNewFilterSettings = (newFilter) => {\n        newFilter.page = 0\n        setFiltering(newFilter)\n    }\n\n    // Go to next/previous\n    const onPrevious = () => {\n        setFiltering({...filtering, page: filtering.page-1})\n    }\n    const onNext = () => {\n        setFiltering({...filtering, page: filtering.page+1})\n    }\n\n    return (\n        <Grid fluid style={{padding: \"20px\"}}>\n            <Row>\n                <Col md={24}>\n                    <h1 style={{fontWeight:\"bold\", display: \"inline-block\"}}>Albums</h1>\n                </Col>\n                <AlbumsListFilter id=\"albumsFilter\" onFilterChanged={setNewFilterSettings} />\n                <NavigationButtons id=\"pageNavigation\" className=\"rs-hidden-xs rs-hidden-sm\" page={filtering.page} onNext={onNext} onPrevious={onPrevious} disableNext={disableNext} />\n            </Row>\n            {!loading && <Row>\n                <Col md={24} className=\"result-grid-container\" >\n                    { albums.map(album => \n                        <div key={album.id} className=\"result-item\">\n                            <AlbumResult album={album} showYear={true} />\n                        </div>\n                    )}\n                    { albums.length === 0 && <Col md={24} style={{textAlign:\"center\", padding:\"10%\"}}>No results</Col> }\n                </Col>\n            </Row>}\n            {loading && <Loader size=\"lg\" center={true} />}\n            <Row>\n                <Col md={24} mdHidden lgHidden>\n                    <NavigationButtons id=\"pageNavigationMobile\" page={filtering.page} onNext={onNext} onPrevious={onPrevious} disableNext={disableNext} />\n                </Col>\n            </Row>\n        </Grid>\n    )\n}\n\nAlbumsList.propTypes = {\n    loadAlbums: PropTypes.func.isRequired,\n    albums: PropTypes.array\n}\n\nAlbumsList.defaultProps = {\n    albums: []\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { loadAlbums } from \"../../redux/actions/albumActions\"\nimport { albumsSelector } from \"../../redux/selectors/albumSelectors\"\n// UI\nimport {AlbumsList} from \"./AlbumsList\"\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"albums\" : albumsSelector(state)\n    }\n}\n\nconst mapDispatchToProps = { loadAlbums }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlbumsList)","import { createSelector } from 'reselect'\n\nconst getPlaylist = (state, props) => state.playlists.byId[props.playlistId]\n\nconst getAlbum = (state, props) => state.albums.byId[props.albumId]\n\nconst getSongs = (state, props) => state.songs.byId\n\nconst getFavourites = (state, props) => state.favourites\n\nexport const makeGetSongsOfAlbum = () => {\n    return createSelector (\n        [ getAlbum, getSongs ],\n        (album, songs) => {\n            return (album && album.song)\n                ? album.song.reduce( (accum,songId) => {\n                    if( songs[songId] ) {\n                        accum.push(songs[songId])\n                    }\n                    return accum\n                }, [])\n                : []\n        }\n    )\n}\n\nexport const songsSelector = createSelector(\n    [getSongs],\n    songs => Object.keys(songs).map(id => songs[id])\n)\n\nexport const songsOfArtistSelector = createSelector(\n    [getSongs, (state, props) => props.artistId ],\n    (songs, artistId) => {\n        return Object.keys(songs).map(id => songs[id]).filter(song => song.artistId === artistId)\n    }\n)\n\nexport const songsOfGenreSelector = createSelector(\n    [getSongs, (state, props) => props.genre.value ],\n    (songs, genre) => {\n        return Object.keys(songs).map(id => songs[id]).filter(song => song.genre === genre)\n    }\n)\n\nexport const songsOfPlaylistSelector = createSelector(\n    [getPlaylist, getSongs],\n    (playlist, songs) => {\n        return (playlist && playlist.songs)\n            ? playlist.songs.reduce( (accum,songId) => {\n                if( songs[songId] ) {\n                    accum.push(songs[songId])\n                }\n                return accum\n            }, [])\n            : []\n    }\n)\n\nexport const favouriteSongsSelector = createSelector(\n    [getSongs, getFavourites],\n    (songs, favourites) => {\n        return favourites.reduce( (accum,songId) => {\n            if( songs[songId] ) {\n                accum.push(songs[songId])\n            }\n            return accum\n        }, [])\n    }\n)","import React from \"react\"\n// Utils\nimport { seconds_to_mss, display_starred } from \"../../utils/formatting.js\"\nimport { sortSongsByKey, filterSongsByValue } from \"../../utils/utils.js\"\nimport PropTypes from 'prop-types'\nimport subsonic from \"../../api/subsonicApi\"\n// UI\nimport \"./SongsTable.less\"\n// Table components\nimport { Table, Icon, Checkbox, Whisper, Tooltip } from 'rsuite'\nconst { Column, HeaderCell, Cell } = Table\n\nconst CheckCell = ({ rowData, onChange, checkedKeys, dataKey, ...props }) => {\n\n    function onClick(event) {\n        // Don't propagate the event to prevent the Table from thinking that the\n        // user also clicked on the row/song\n        event.stopPropagation()\n    }\n    return (\n        <Cell {...props} style={{ padding: 0 }}>\n            <div style={{ lineHeight: '46px' }}>\n                <Checkbox\n                    value={rowData[dataKey]}\n                    inline\n                    onClick={onClick}\n                    onChange={onChange}\n                    checked={checkedKeys.some(item => item === rowData[dataKey])} />\n            </div>\n        </Cell>\n    )\n}\n\nexport default class SongsTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { checkedKeys: [], loading : false, songs : props.songs || [] }\n    }\n\n    componentDidUpdate(prevProps) {\n        // Clear checked songs to prevent the SongsTable keeping track of deleted songs\n        if( prevProps.songs.length !== this.props.songs.length ) {\n            if( this.state.checkedKeys.length > 0 ) {\n                this.setState({ checkedKeys: [] })\n            }\n        }\n        // Update the songs that are stored in nextCheckedKeys with the new objects\n        if( prevProps.songs !== this.props.songs ) {\n            this.props.onSongsSelected && this.props.onSongsSelected(\n                this.state.checkedKeys.map(key => this.props.songs.find(s => s.id === key) )\n            )\n            // Reset the songs to show with filter and sorting\n            this.applyFilter(this.props.songsFilter)\n        }\n        // Update filter when changed\n        if( prevProps.songsFilter !== this.props.songsFilter ) {\n            this.applyFilter(this.props.songsFilter)\n        }\n    }\n\n    /* Handle clicking on a row */\n\n    songClicked = (song) => {\n        // Check if the default behaviour is overwritten\n        if( this.props.onSongClicked ) {\n            this.props.onSongClicked(song)\n        }\n        else{\n            // Build queue randomly with this song at the top\n            this.props.putSongsInQueue(this.props.songs, song)\n        }\n    }\n\n    preventClickPropagation = (event) => {\n        event.stopPropagation()\n    }\n\n    /* Handle clicking on checkboxes */\n\n    handleCheckAll = (value, checked) => {\n        const checkedKeys = checked ? this.state.songs.map(item => item.id) : []\n        this.setState({ checkedKeys })\n        // Notify the parent\n        this.props.onSongsSelected && this.props.onSongsSelected(\n            checkedKeys.map(key => this.state.songs.find(s => s.id === key) )\n        )\n    }\n\n    handleCheck = (value, checked) => {\n        const { checkedKeys } = this.state\n        const nextCheckedKeys = checked\n            ? [...checkedKeys, value]\n            : checkedKeys.filter(item => item !== value)\n        this.setState({ checkedKeys: nextCheckedKeys })\n        // Notify the parent\n        this.props.onSongsSelected && this.props.onSongsSelected(\n            nextCheckedKeys.map(key => this.state.songs.find(s => s.id === key) )\n        )\n    }\n\n    /* Handle sorting */\n\n    handleSortColumn = async (sortColumn, sortType) => {\n        this.setState({loading : true})\n        try {\n            // Only songs that are currently displayed (maybe some were filtered out)\n            // are needed to be sorted, so only sort songs in this.state.songs\n            const sorted = await sortSongsByKey(this.state.songs, sortColumn, sortType)\n            this.setState({sortColumn, sortType, songs: sorted })\n            this.props.onSongsSorted(sorted)\n        }\n        catch(err) {\n            console.log(err)\n        }\n        this.setState({loading : false})\n    }\n\n    /* Handle filtering */\n\n    applyFilter = async (filter) => {\n        this.setState({loading : true})\n        try {\n            // As every time the filter changes the songs displayed must change,\n            // we need to filter the complete list of songs, so filter this.props.songs\n            let filtered = await filterSongsByValue(this.props.songs, filter)\n            // Check if the table was already sorted. If thats the case, then sort the results\n            if( this.state.sortType && this.state.sortColumn ) {\n                filtered = await sortSongsByKey(filtered, this.state.sortColumn, this.state.sortType)\n            }\n            // Reset the checkedKeys to avoid having to update the checkedKeys as well\n            this.setState({songs: filtered, checkedKeys : [] })\n        }\n        catch(err) {\n            console.log(err)\n        }\n        this.setState({loading : false})\n    }\n\n    render() {\n        // Get table properties\n        const sortable = this.props.sortable\n        // Define songs data\n        const currentSongPlaying = this.props.currentSongPlaying || {}\n        const songs = this.state.songs\n        const columnsToShow = this.props.columns || defaultColumns\n        // Define Checkbox's data\n        const checkedKeys = this.state.checkedKeys\n        let checked = false\n        let indeterminate = false\n        if (checkedKeys.length === songs.length) {\n            checked = true\n        }\n        else if (checkedKeys.length === 0) {\n            checked = false\n        }\n        else if (checkedKeys.length > 0 && checkedKeys.length < songs.length) {\n            indeterminate = true\n        }\n        // Render\n        const heightProps = this.props.height === -1\n            ? { autoHeight : true, style : {overflow:\"initial\"} }\n            : { height : this.props.height}\n        return (\n            <Table\n                {...heightProps}\n                id=\"songsTable\"\n                onRowClick={this.songClicked}\n                virtualized\n                data={songs}\n                className=\"songs-table\"\n                onSortColumn={this.handleSortColumn}\n                sortColumn={this.state.sortColumn}\n                sortType={this.state.sortType}\n                loading={this.state.loading}\n                rowClassName={(rowData) => rowData && rowData.id === currentSongPlaying.id ? \"currently-playing\" : null }>\n                { columnsToShow.includes(columns.selectable) ? \n                    <Column width={50} align=\"center\">\n                        <HeaderCell style={{ padding: 0 }}>\n                            <div style={{ lineHeight: '40px' }}>\n                                <Checkbox\n                                    id=\"checkAllCell\"\n                                    inline\n                                    checked={checked}\n                                    indeterminate={indeterminate}\n                                    onChange={this.handleCheckAll} />\n                            </div>\n                        </HeaderCell>\n                        <CheckCell\n                            id=\"checkColumn\"\n                            dataKey=\"id\"\n                            checkedKeys={checkedKeys}\n                            onChange={this.handleCheck} />\n                    </Column> : null\n                }\n                { columnsToShow.includes(columns.title) ? \n                    <Column flexGrow={4} sortable={sortable}>\n                        <HeaderCell> Title </HeaderCell>\n                        <Cell dataKey=\"title\">\n                            { rowData => <p>{rowData.title} {rowData.starred && <Icon icon='star' />} <Icon icon='volume-up' className=\"icon-when-playing\" /></p> }\n                        </Cell>\n                    </Column> : null\n                }\n\n                { columnsToShow.includes(columns.artist) ? \n                    <Column flexGrow={3} sortable={sortable}>\n                        <HeaderCell>Artist</HeaderCell>\n                        <Cell dataKey=\"artist\" />\n                    </Column> : null\n                }\n\n                { columnsToShow.includes(columns.album) ? \n                    <Column flexGrow={2} sortable={sortable}>\n                        <HeaderCell>Album</HeaderCell>\n                        <Cell dataKey=\"album\" />\n                    </Column>\n                    : null\n                }\n\n                { columnsToShow.includes(columns.starred) ? \n                    <Column flexGrow={2} sortable={sortable}>\n                        <HeaderCell>Starred</HeaderCell>\n                        <Cell dataKey=\"starred\">\n                            {rowData => display_starred(rowData.starred) }\n                        </Cell>\n                    </Column>\n                    : null\n                }\n\n                { columnsToShow.includes(columns.bitRate) ? \n                    <Column width={60}>\n                        <HeaderCell>BitRate</HeaderCell>\n                        <Cell dataKey=\"bitRate\" />\n                    </Column>\n                    : null\n                }\n\n                { columnsToShow.includes(columns.duration) ? \n                    <Column width={55}>\n                        <HeaderCell><Icon icon='clock-o' /></HeaderCell>\n                        <Cell dataKey=\"duration\" >\n                            { rowData => seconds_to_mss(rowData.duration)}\n                        </Cell>\n                    </Column>\n                    : null\n                }\n\n                { columnsToShow.includes(columns.download) ? \n                    <Column width={55}>\n                        <HeaderCell><Icon icon='download' /></HeaderCell>\n                        <Cell dataKey=\"id\">\n                            { rowData => (\n                                <Whisper placement=\"auto\" trigger=\"hover\" speaker={<Tooltip>{rowData.path}</Tooltip>}>\n                                    <a href={subsonic.getDownloadUrl(rowData.id)} download={rowData.title} style={{color:\"#8e8e93\"}} target=\"_blank\" rel=\"noopener noreferrer\">\n                                      <Icon icon='download' onClick={this.preventClickPropagation} />\n                                    </a>\n                                </Whisper>\n                            )}\n                        </Cell>\n                    </Column>\n                    : null\n                }\n            </Table>\n        )\n    }\n}\n\n/* Define possible columns to show */\nconst columns = {\n    title: \"title\",\n    artist: \"artist\",\n    album: \"album\",\n    duration: \"duration\",\n    bitRate: \"bitRate\",\n    selectable: \"selectable\",\n    download: \"download\",\n    starred: \"starred\"\n}\n\n// Properties\nSongsTable.propTypes = {\n  height : PropTypes.number,\n  columns: PropTypes.arrayOf(PropTypes.string),\n  sortable : PropTypes.bool,\n  songsFilter : PropTypes.string,\n  putSongsInQueue : PropTypes.func,\n  onSongsSelected : PropTypes.func,\n  onSongsSorted : PropTypes.func,\n  onSongClicked : PropTypes.func\n}\nSongsTable.columns = columns\n\n// Defaults\nconst defaultColumns = [\"title\", \"artist\", \"album\", \"duration\", \"bitRate\", \"selectable\", \"download\"]\nSongsTable.defaultProps = {\n    height : -1,\n    sortable : false,\n    columns : defaultColumns,\n    songsFilter : null,\n    putSongsInQueue: () => null,\n    onSongsSelected: () => null,\n    onSongsSorted: () => null,\n    onSongClicked: null,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { putSongsInQueue } from \"../../redux/actions/songsActions\"\nimport { getSongCurrentlyPlayingSelector } from '../../redux/selectors/musicPlayerSelector'\n// UI\nimport SongsTable from './SongsTable'\n\nconst mapStateToProps = (state) => {\n    return {\n        currentSongPlaying : getSongCurrentlyPlayingSelector(state)\n    }\n}\n\nconst mapDispatchToProps = { putSongsInQueue }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SongsTable)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Dropdown, Icon } from 'rsuite'\n\nexport default class PlaylistSelectorDropdown extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // Create a random key for favourites to avoid constraining the names of the playlists\n        // i.e. if we assign eventKey=\"favs\", then a playlist could not be named \"favs\"\n        this.favourites_key = `${Math.random()}`\n        this.queue_key = `${Math.random()}`\n    }\n\n    onItemSelected = (eventKey) => {\n        if(this.props.playlists[eventKey]) {\n            this.props.onPlaylistSelected && this.props.onPlaylistSelected(this.props.playlists[eventKey])\n        }\n        else if( this.favourites_key === eventKey ) {\n            this.props.onFavouritesSelected && this.props.onFavouritesSelected()\n        }\n        else {\n            this.props.onQueueSelected && this.props.onQueueSelected()\n        }\n    }\n\n    render() {\n        const showFavourites = this.props.showFavourites\n        const showQueue = this.props.showQueue\n        return (\n            <Dropdown id=\"selectDropdown\" title=\"Add to ...\" trigger=\"click\" onSelect={this.onItemSelected} disabled={this.props.disabled} placement=\"bottomEnd\" >\n                {\n                    showFavourites ? \n                        <Dropdown.Item id=\"favourites_item\" eventKey={this.favourites_key} icon={<Icon icon=\"star\" />}>Favourites</Dropdown.Item>\n                        : null\n                }\n                {\n                    showQueue ? \n                        <Dropdown.Item id=\"queue_item\" eventKey={this.queue_key} icon={<Icon icon=\"bars\" />}>Queue</Dropdown.Item>\n                        : null\n                }\n                {\n                    showFavourites ? <Dropdown.Item divider /> : null\n                }\n                {\n                    Object.keys(this.props.playlists).map(pId => \n                        this.props.playlists[pId].isMine ?\n                            <Dropdown.Item key={pId} data-key={pId} eventKey={pId}>{this.props.playlists[pId].name}</Dropdown.Item>\n                            : null\n                    )\n                }\n            </Dropdown>\n        )\n    }\n\n}\n\nPlaylistSelectorDropdown.propTypes = {\n    playlists : PropTypes.object.isRequired,\n    onFavouritesSelected : PropTypes.func,\n    onPlaylistSelected : PropTypes.func,\n    showFavourites : PropTypes.bool.isRequired,\n    showQueue : PropTypes.bool.isRequired\n}\n\nPlaylistSelectorDropdown.defaultProps = {\n    playlists : {},\n    showFavourites : true,\n    showQueue : true,\n}\n","// Redux\nimport { connect } from \"react-redux\"\n// UI\nimport PlaylistSelectorDropdown from './PlaylistSelectorDropdown'\n\nconst mapStateToProps = (state) => {\n    return {\n        \"playlists\" : state.playlists.byId,\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(PlaylistSelectorDropdown)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport SongsTable from '../SongsTable'\nimport PlaylistSelectorDropdown from '../PlaylistSelectorDropdown'\nimport SearchBar from \"../SearchBar/SearchBar\"\nimport { Button } from 'rsuite'\n\nexport default class SongsTableEnhanced extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { selectedSongs : [], filter : null }\n        this.songs = props.songs\n    }\n\n    componentDidUpdate(prevProps) {\n        this.songs = this.props.songs\n    }\n\n    // Store new order of songs\n    onSongsSorted = (songs) => {\n        this.songs = songs\n    }\n\n    // Play all songs\n    playAll = () => {\n        this.songs && this.props.playAllSongs(this.songs)\n    }\n\n    // Add option to filter songs\n    onFilterSongs = (query) => {\n        const fixedValue = query ? query : null\n        this.setState({filter : fixedValue})\n    }\n\n    // Add to favs and playlist\n    onSongsSelected = (selectedSongs) => {\n        this.setState({selectedSongs: selectedSongs})\n    }\n\n    onPlaylistSelected = (playlist) => {\n        this.props.addSongsToPlaylist(playlist, this.state.selectedSongs)\n    }\n\n    onFavouritesSelected = () => {\n        this.props.setStarOnSongs(this.state.selectedSongs, true)\n    }\n\n    onQueueSelected = () => {\n        this.props.addSongsToQueue(this.state.selectedSongs)\n    }\n\n    render() {\n        const {style, className, ...rest} = this.props\n        const hasSongsSelected = this.state.selectedSongs.length !== 0\n        const showPlaylistDropdown = rest.withPlaylistDropdown\n        const showSearchFilter = rest.withSearchFilter\n        const filterValue = this.state.filter\n        const showPlayButton = rest.showPlayButton\n        return (\n            <div className={className} style={{...style, display:\"flex\", flexFlow:\"column\"}}>\n                <div style={{display:\"flex\", flexFlow:\"row\", width:\"100%\"}}>\n                    {showPlayButton && <Button id=\"playAll\" onClick={this.playAll} appearance=\"ghost\">PLAY</Button>}\n                    {showSearchFilter && <SearchBar style={{display:'flex', flex:1}} id=\"searchBar\" size=\"md\" onSearch={this.onFilterSongs}/> }\n                    {showPlaylistDropdown && <PlaylistSelectorDropdown id=\"playlistSelector\" onQueueSelected={this.onQueueSelected} onPlaylistSelected={this.onPlaylistSelected} onFavouritesSelected={this.onFavouritesSelected} disabled={!hasSongsSelected} />}\n                </div>\n                {\n                    rest.fixedHeightToFill ? (\n                        <div style={{flexGrow:1}}>\n                            <AutoSizer id=\"autosizerContainer\" disableWidth>\n                            {({height}) => (\n                                <SongsTable id=\"songsTable\" songsFilter={filterValue} height={height} onSongsSelected={this.onSongsSelected} onSongsSorted={this.onSongsSorted} {...rest} />\n                            )}\n                            </AutoSizer>\n                        </div>\n                    ) : ( <SongsTable id=\"songsTable\" songsFilter={filterValue} onSongsSelected={this.onSongsSelected} onSongsSorted={this.onSongsSorted} {...rest} /> )\n                }\n            </div>\n        )\n    }\n\n}\n\nSongsTableEnhanced.propTypes = {\n    withPlaylistDropdown : PropTypes.bool,\n    withSearchFilter : PropTypes.bool,\n    fixedHeightToFill : PropTypes.bool,\n    showPlayButton : PropTypes.bool,\n    addSongsToPlaylist : PropTypes.func,\n    addSongsToQueue : PropTypes.func,\n    setStarOnSongs : PropTypes.func,\n    playAllSongs : PropTypes.func,\n}\n\nSongsTableEnhanced.defaultProps = {\n    withPlaylistDropdown : true,\n    withSearchFilter : true,\n    fixedHeightToFill : false,\n    showPlayButton : true,\n    addSongsToPlaylist: () => null,\n    addSongsToQueue: () => null,\n    setStarOnSongs: () => null,\n    playAllSongs: () => null,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { addSongsToPlaylist } from \"../../redux/actions/playlistsActions\"\nimport { addSongsToQueue, putSongsInQueue } from \"../../redux/actions/songsActions\"\nimport { setStarOnSongs } from \"../../redux/actions/favouritesActions\"\n// UI\nimport SongsTableEnhanced from './SongsTableEnhanced'\n\nconst mapDispatchToProps = { addSongsToQueue, addSongsToPlaylist, setStarOnSongs, playAllSongs: putSongsInQueue }\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SongsTableEnhanced)\n","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport SongsTableEnhanced from '../SongsTableEnhanced'\nimport SongsTable from '../SongsTable/SongsTable'\n\nconst COLUMNS_TO_SHOW = [SongsTable.columns.title, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.selectable, SongsTable.columns.download]\n\nexport default function ArtistAllSongs(props) {\n    const songs = props.songs\n    return (\n        <SongsTableEnhanced style={{...props.style, padding:\"0px 15px 15px\"}} songs={songs} columns={COLUMNS_TO_SHOW} fixedHeightToFill={true} sortable={true} />\n    )\n}\n\nArtistAllSongs.propTypes = {\n    style : PropTypes.object,\n    songs : PropTypes.array,\n}\n\nArtistAllSongs.defaultProps = {\n    style : {},\n    songs : [],\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { songsOfArtistSelector } from '../../redux/selectors/songSelectors'\n// UI\nimport ArtistAllSongs from './ArtistAllSongs'\n\nconst mapStateToProps = (state, props) => {\n    return {\n        songs: songsOfArtistSelector(state, props),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(ArtistAllSongs)","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// Utils\nimport subsonic from \"../../api/subsonicApi\"\nimport { seconds_to_hhmmss } from \"../../utils/formatting.js\"\n// UI\nimport { Grid, Row, Col, Panel, IconButton, Icon } from 'rsuite'\nimport SongsTable from '../SongsTable/SongsTable'\nimport SongsTableEnhanced from '../SongsTableEnhanced'\nimport \"./Album.less\"\n\nconst COLUMNS_TO_SHOW = [SongsTable.columns.title, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.selectable, SongsTable.columns.download]\n\nexport default function Album(props) {\n    const { album, songs, style, starAlbums, linkArtist } = props\n    // Toggle the star on this album\n    function starThisAlbum() {\n        starAlbums([album], !album.starred)\n    }\n\n    function goToArtist(artistId) {\n        navigate(`/artists/${artistId}`)\n    }\n    // Render all\n    const starStyle = album.starred ? 'primary' : 'default'\n    const starIcon = album.starred ? 'star' : 'star-o'\n    return (\n        <Panel shaded bordered className=\"rs-table album-panel\" style={{...style}}>\n            <Grid fluid>\n                <Row>\n                    <Col smHidden xsHidden md={6} lg={6}>\n                        <img src={album.coverArt ? subsonic.getCoverArtUrl(album.coverArt) : \"/currently_placeholder.png\"} alt=\"Album Cover\" width=\"100%\" style={{marginBottom:\"5px\"}} />\n                        <IconButton id=\"starAlbumLG\" icon={<Icon icon=\"star\" />} circle size=\"lg\" style={{marginTop:\"-30px\", marginRight:\"10px\", float:\"right\"}} appearance={starStyle} onClick={starThisAlbum}/>\n                        {linkArtist && <p><strong>By: </strong> <span className=\"artist-link\" onClick={e => goToArtist(album.artistId)}>{album.artist}</span> </p> }\n                        <p><strong>Genre: </strong> {album.genre} </p>\n                        <p><strong>Songs: </strong> {album.songCount} ({seconds_to_hhmmss(album.duration)}) </p>\n                        <p><strong>Year: </strong> {album.year} </p>\n                    </Col>\n                    <Col sm={24} md={18} style={{paddingLeft:\"10px\"}}>\n                        <h2 id=\"albumHeader\">\n                            <img className=\"rs-hidden-md rs-hidden-lg\" src={album.coverArt ? subsonic.getCoverArtUrl(album.coverArt) : null} alt=\"Album Cover\" width=\"45\" height=\"45\" style={{marginRight:\"10px\", marginBottom:\"5px\"}} />\n                            {album ? album.name : \"...\"}\n                            <IconButton id=\"starAlbumSM\" className=\"rs-hidden-md rs-hidden-lg\" icon={<Icon icon={starIcon} />} appearance=\"link\" size=\"lg\" onClick={starThisAlbum}/>\n                        </h2>\n                        <SongsTableEnhanced songs={songs} columns={COLUMNS_TO_SHOW} fixedHeightToFill={false} withSearchFilter={false} />\n                    </Col>\n                </Row>\n            </Grid>\n        </Panel>\n    )\n}\n\nAlbum.propTypes = {\n    album : PropTypes.object,\n    style : PropTypes.object,\n    songs : PropTypes.array,\n    starAlbums : PropTypes.func,\n    linkArtist : PropTypes.bool,\n}\n\nAlbum.defaultProps = {\n    album : {},\n    style : {},\n    songs : [],\n    starAlbums: () => null,\n    linkArtist: true,\n}","// Redux\nimport { connect } from \"react-redux\"\nimport { addSongsToPlaylist } from \"../../redux/actions/playlistsActions\"\nimport { setStarOnAlbums } from \"../../redux/actions/albumActions\"\nimport { makeGetSongsOfAlbum } from '../../redux/selectors/songSelectors'\n// UI\nimport Album from './Album'\n\nconst mapStateToProps = (state, ownProps) => {\n    const getSongsOfAlbum = makeGetSongsOfAlbum()\n    return {\n        \"album\" : state.albums.byId[ownProps.albumId],\n        \"songs\" : getSongsOfAlbum(state, ownProps),\n    }\n}\n\nconst mapDispatchToProps = { addSongsToPlaylist, starAlbums: setStarOnAlbums }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Album)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Utils\nimport subsonic from \"../../api/subsonicApi\"\n// UI\nimport Album from \"../Album\"\nimport { Divider, Nav, SelectPicker, Tooltip, Whisper } from 'rsuite'\nimport \"./ArtistByAlbums.less\"\n\nexport default class ArtistByAlbums extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {selectedAlbumId : null}\n    }\n\n    onAlbumSelected = (albumId) => {\n        this.setState({selectedAlbumId : albumId})\n    }\n\n    render() {\n        const albums = this.props.albums\n        const selectedAlbumId = this.state.selectedAlbumId\n        const selectableAlbums = albums.map(album => ({ value : album.id, label : album.name }))\n        return (\n            <div className=\"artists-by-albums-container\" style={{display:\"flex\", flexFlow:\"column\", flexGrow:1, padding:\"15px 5px 0px 5px\"}}>\n                {/* Provide with a Select on small screens to navigate through the albums */}\n                <div style={{marginBottom:\"10px\"}} className=\"rs-hidden-lg rs-hidden-md\">\n                    <SelectPicker id=\"selectAlbums\" data={selectableAlbums} style={{ width: 224 }} searchable={false} cleanable={false} onChange={this.onAlbumSelected}/>\n                </div>\n                <div style={{display:\"flex\", flexFlow:\"row\", height:\"100%\"}}>\n                    {/* Provide with a nice albums collection on normal screens to navigate through the albums */}\n                    <Nav className=\"nav-artist-by-albums rs-hidden-xs rs-hidden-sm\" vertical onSelect={this.onAlbumSelected} activeKey={selectedAlbumId}>\n                        {albums.map(album =>\n                            <Nav.Item key={album.id} eventKey={album.id} >\n                                <Whisper\n                                    trigger=\"hover\"\n                                    placement=\"right\"\n                                    speaker={<Tooltip>{album.name}</Tooltip>}>\n                                    <div className=\"album-element\">\n                                        <img src={album.coverArt ? subsonic.getCoverArtUrl(album.coverArt) : \"/currently_placeholder.png\"} alt=\"cover\" width=\"40\" height=\"40\"/>\n                                        <span>{\" \"}{album.name}</span>\n                                    </div>\n                                </Whisper>\n                            </Nav.Item>\n                        )}\n                    </Nav>\n                    <Divider className=\"rs-hidden-xs rs-hidden-sm\" vertical style={{height:\"100%\", minWidth:\"1px\", marginLeft:0}} />\n                    {/* This is the main album card */}\n                    <div style={{flexGrow:1, paddingBottom:\"10px\"}} >\n                        {selectedAlbumId && <Album id=\"album\" albumId={selectedAlbumId} linkArtist={false} style={{height:\"100%\", overflow:\"auto\"}} />}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nArtistByAlbums.propTypes = {\n    albums : PropTypes.array,\n}\n\nArtistByAlbums.defaultProps = {\n    albums : [],\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { getAlbumsOfArtist } from \"../../redux/selectors/albumSelectors\"\n// UI\nimport ArtistByAlbums from './ArtistByAlbums'\n\nconst mapStateToProps = (state, props) => {\n    return {\n        albums : getAlbumsOfArtist(state, props),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(ArtistByAlbums)","import React from \"react\"\nimport PropTypes from 'prop-types'\n\nfunction ResponsiveTitle(props) {\n    return (\n        <>\n            <h1 style={props.style} className=\"rs-hidden-xs rs-hidden-sm\">{props.children}</h1>\n            <h3 style={props.style} className=\"rs-hidden-md rs-hidden-lg\">{props.children}</h3>\n        </>\n    )\n}\n\nResponsiveTitle.propTypes = {\n    style : PropTypes.object,\n    children : PropTypes.any\n}\n\nexport default ResponsiveTitle\n\n","// UI\nimport ResponsiveTitle from './ResponsiveTitle'\n\nexport default ResponsiveTitle","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Nav, Icon } from 'rsuite'\nimport ArtistAllSongs from '../ArtistAllSongs'\nimport ArtistByAlbums from '../ArtistByAlbums'\nimport ResponsiveTitle from '../ResponsiveTitle' \n\nexport default class Artist extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {selectedView : Artist.KEY_ALL_SONGS}\n    }\n\n    componentDidMount() {\n        this.props.loadOneArtist(this.props.artistId)\n    }\n\n    onViewSelected = (viewId) => {\n        this.setState({selectedView : viewId})\n    }\n\n    render() {\n        const artist = this.props.artist || {}\n        const activeView = this.state.selectedView\n        return (\n            <div style={{display:\"flex\", flexFlow:\"column\", height:\"100%\", width:\"100%\"}}>\n                <div style={{display:\"flex\", flexFlow:\"row\", padding:\"20px 20px 0px 20px\",}}>\n                    <ResponsiveTitle style={{fontWeight: \"bold\", flexGrow:1}}>{artist != null ? artist.name : \"...\"}</ResponsiveTitle>\n                    <Nav id=\"viewSelector\" onSelect={this.onViewSelected} activeKey={activeView}>\n                        <Nav.Item icon={<Icon icon=\"bars\" />} eventKey={Artist.KEY_ALL_SONGS} />\n                        <Nav.Item icon={<Icon icon=\"th-large\" />} eventKey={Artist.KEY_BY_ALBUM} />\n                    </Nav>\n                </div>\n                { activeView === Artist.KEY_BY_ALBUM &&  <ArtistByAlbums artistId={this.props.artistId} />}\n                { activeView === Artist.KEY_ALL_SONGS && <ArtistAllSongs artistId={this.props.artistId} style={{flexGrow:1}} /> }\n            </div>\n        )\n    }\n}\n\nArtist.propTypes = {\n    artistId : PropTypes.string.isRequired,\n    artist : PropTypes.object,\n    loadOneArtist : PropTypes.func.isRequired\n}\n\nArtist.defaultProps = {\n    artist : {},\n}\n\nArtist.KEY_ALL_SONGS = \"all\"\nArtist.KEY_BY_ALBUM  = \"by_album\"","// Redux\nimport { connect } from \"react-redux\"\nimport { loadOneArtist } from \"../../redux/actions/artistsActions\"\n// UI\nimport Artist from './Artist'\n\nconst mapStateToProps = (state, props) => {\n    return {\n        artist : state.artists.byId[props.artistId],\n    }\n}\n\nconst mapDispatchToProps = { loadOneArtist }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Artist)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport Album from '../Album'\n\nexport default class AlbumView extends React.PureComponent {\n\n    componentDidMount() {\n        this.props.loadAlbum(this.props.albumId)\n    }\n\n    render() {\n        const albumId = this.props.albumId\n        return (\n            <div style={{padding:\"20px\"}}>\n                <Album albumId={albumId} />\n            </div>\n        )\n    }\n}\n\nAlbumView.propTypes = {\n    loadAlbum : PropTypes.func.isRequired,\n    albumId : PropTypes.string.isRequired,\n}\n\nAlbumView.defaultProps = {\n    loadAlbum : () => {},\n    albumId : null,\n}","// Redux\nimport { connect } from \"react-redux\"\nimport { loadAlbum } from \"../../redux/actions/albumActions\"\n// UI\nimport AlbumView from './AlbumView'\n\nconst mapDispatchToProps = { loadAlbum }\n\nexport default connect(null, mapDispatchToProps)(AlbumView)","import React from \"react\"\nimport { navigate } from \"@reach/router\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Button, Modal, Icon, Input } from 'rsuite'\n\nexport default class DeletePlaylistModal extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.waitingForDeletion = false\n        this.state = {deleteNameError : false}\n        this.confirmation_name = \"\"\n    }\n\n    componentDidUpdate(prevProps) {\n        // Check if the playlist was deleted: it doesnt exist and we dispatched a deletion request\n        // Alternative: Navigate on deletion without waiting for confirmation\n        if(!this.props.playlist && this.waitingForDeletion ) {\n            navigate(\"/\")\n        }\n    }\n\n    closeModalAndDelete = () => {\n        // validate playlist name\n        if( this.confirmation_name === this.props.playlist.name ) {\n            this.waitingForDeletion = true\n            this.props.deletePlaylist(this.props.playlist)\n            this.closeDeleteModal()\n        }\n        else {\n            this.setState({deleteNameError : true})\n        }\n    }\n\n    closeDeleteModal = () => {\n        this.props.onHide && this.props.onHide()\n    }\n\n    render() {\n        const playlistToDelete = this.props.playlist || {}\n        return (\n            <Modal {...this.props} className=\"subplayer-modal\" backdrop=\"static\" onHide={this.closeDeleteModal} size=\"xs\">\n                <Modal.Body>\n                    <Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }} />\n                    {'  '}\n                    Once a playlist is deleted, it can't be recovered. If you want to proceed, write the name of the playlist \"<b>{playlistToDelete.name}</b>\":\n                    <Input id=\"confirm_name\" name=\"confirm_name\" onChange={(value => {this.confirmation_name = value})} style={{width:\"100%\", marginTop:\"10px\"}} />\n                    {this.state.deleteNameError ? <span id=\"errorMessage\" style={{color:\"red\"}}>Name does not match</span> : null}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button id=\"deleteButton\" onClick={this.closeModalAndDelete} appearance=\"primary\"> Ok </Button>\n                    <Button id=\"cancelButton\" onClick={this.closeDeleteModal} appearance=\"subtle\"> Cancel </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\nDeletePlaylistModal.propTypes = {\n    onHide: PropTypes.func,\n    deletePlaylist: PropTypes.func.isRequired,\n    playlistId : PropTypes.string.isRequired\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { deletePlaylist } from \"../../redux/actions/playlistsActions\"\n// UI\nimport DeletePlaylistModal from './DeletePlaylistModal'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"playlist\" : state.playlists.byId[ownProps.playlistId],\n    }\n}\n\nconst mapDispatchToProps = { deletePlaylist }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(DeletePlaylistModal)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// UI\nimport { Button, Modal, Form, FormGroup, ControlLabel, Input, Checkbox } from 'rsuite'\n\nexport default class EditPlaylistModal extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {editNameError : false}\n        this.tempPlaylist = {}\n    }\n\n    componentDidUpdate(prevProps) {\n        if( !prevProps.show && this.props.show ) {\n            this.setTempPlaylistToDefault(this.props.playlist)\n        }\n    }\n\n    setTempPlaylistToDefault = (playlist) => {\n        this.tempPlaylist = { name: playlist.name, comment : playlist.comment, public : playlist.public }\n    }\n\n    closeEditModal = () => {\n        this.props.onHide && this.props.onHide()\n        this.setState({editNameError : false})\n        this.setTempPlaylistToDefault(this.props.playlist)\n    }\n\n    closeModalAndEdit = (event) => {\n        // Do not submit form until data is checked\n        if( event ){\n            event.stopPropagation()\n            event.preventDefault()\n        }\n        // Check data\n        if( !this.tempPlaylist.name ) {\n            this.setState({editNameError : true})\n        }\n        else {\n            this.props.editPlaylist(this.props.playlist.id, this.tempPlaylist.name, this.tempPlaylist.comment, this.tempPlaylist.public)\n            this.props.onHide && this.props.onHide()\n            this.setState({editNameError : false})\n        }\n    }\n\n    render() {\n        const playlist = this.props.playlist || { id:\"\", name:\"\", songCount:0, duration:0, isMine:false}\n        return (\n            <Modal {...this.props} className=\"subplayer-modal\" backdrop=\"static\" onHide={this.closeEditModal} size=\"xs\">\n                <Modal.Header>\n                    <Modal.Title>Edit Playlist</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form fluid onSubmit={this.closeModalAndEdit}>\n                        <FormGroup>\n                            <ControlLabel>Name</ControlLabel>\n                            <Input id=\"name\" name=\"name\" defaultValue={playlist.name} onChange={(value => {this.tempPlaylist.name = value})} style={{width:\"100%\"}} />\n                            { this.state.editNameError ? <span id=\"nameErrorMessage\" style={{color:\"red\"}}>A name is required</span> : null }\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Comment</ControlLabel>\n                            <Input id=\"comment\" name=\"comment\" defaultValue={playlist.comment} style={{width:\"100%\"}} onChange={(value => {this.tempPlaylist.comment = value})} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Checkbox id=\"isPublic\" name=\"isPublic\" defaultChecked={playlist.public} onChange={((value, checked) => {this.tempPlaylist.public = checked})}>Public</Checkbox>\n                        </FormGroup>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button id=\"editButton\" type=\"submit\" appearance=\"primary\" onClick={this.closeModalAndEdit}> Save </Button>\n                    <Button id=\"cancelButton\" onClick={this.closeEditModal} appearance=\"subtle\"> Cancel </Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\nEditPlaylistModal.propTypes = {\n    onHide: PropTypes.func,\n    playlistId : PropTypes.string.isRequired,\n    editPlaylist : PropTypes.func.isRequired,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { editPlaylist } from \"../../redux/actions/playlistsActions\"\n// UI\nimport EditPlaylistModal from './EditPlaylistModal'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"playlist\" : state.playlists.byId[ownProps.playlistId],\n    }\n}\n\nconst mapDispatchToProps = { editPlaylist }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditPlaylistModal)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Utils\nimport { seconds_to_hhmmss } from \"../../utils/formatting.js\"\n// UI\nimport \"./Playlist.less\"\nimport SongsTable from '../SongsTable/SongsTable'\nimport SongsTableEnhanced from '../SongsTableEnhanced'\nimport DeletePlaylistModal from '../DeletePlaylistModal'\nimport EditPlaylistModal from '../EditPlaylistModal'\nimport ResponsiveTitle from '../ResponsiveTitle' \nimport { Button, Icon, IconButton } from 'rsuite'\n\nconst NOT_MINE_COLUMNS_TO_SHOW = [SongsTable.columns.title, SongsTable.columns.artist, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.download]\nconst MINE_COLUMNS_TO_SHOW = [...NOT_MINE_COLUMNS_TO_SHOW, SongsTable.columns.selectable]\n\nexport default class Playlist extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {selectedSongs : [], showDeleteModal : false, showEditModal : false}\n        this.deletedIndexes = []\n    }\n    \n    componentDidMount() {\n        this.props.playlistId && this.props.loadSinglePlaylist(this.props.playlistId)\n    }\n\n    componentDidUpdate(prevProps) {\n        if( this.props.playlistId ) {\n            // Update if the playlist has changed\n            if( this.props.playlistId !== prevProps.playlistId ) {\n                this.setState({selectedSongs: []})\n                this.props.loadSinglePlaylist(this.props.playlistId)\n            }\n        }\n    }\n\n    onSongsSelected = (selectedSongs) => {\n        this.setState({selectedSongs: selectedSongs})\n    }\n\n    removeSelectedSongs = () => {\n        if( this.props.removeSongsFromPlaylist && this.state.selectedSongs.length > 0 ) {\n            // Get indexes of this playlist because of stupid Subsonic API\n            const selectedIndexes = this.state.selectedSongs.map( selectedSong => this.props.songs.findIndex(song => song.id === selectedSong.id) )\n            this.deletedIndexes = selectedIndexes \n            // Call action\n            this.props.removeSongsFromPlaylist( this.props.playlist, this.state.selectedSongs, selectedIndexes)\n        }\n    }\n\n    formatExternalPlaylistName = (name) => {\n        const regex = /^\\[.*?\\] /\n        return name.replace(regex, \"\")\n    }\n\n    /* Edition modal */\n\n    triggerEditModal = () => {\n        this.setState({showEditModal:true})\n    }\n\n    closeEditModal = () => {\n        this.setState({showEditModal:false})\n    }\n\n    /* Deletion Modal */\n\n    askDeletionConfirmation = () => {\n        this.setState({showDeleteModal:true})\n    }\n\n    closeDeleteModal = () => {\n        this.setState({showDeleteModal:false})\n    }\n\n    render() {\n        const playlist = this.props.playlist || { id:\"\", name:\"\", songCount:0, duration:0, isMine:false}\n        const songs = this.props.songs\n        const disableButton = this.state.selectedSongs && this.state.selectedSongs.length === 0\n        const columnsToShow = playlist.isMine ? MINE_COLUMNS_TO_SHOW : NOT_MINE_COLUMNS_TO_SHOW\n        // Get correct title and icon depending on the playlist's owner\n        const title = playlist.isMine ? playlist.name : this.formatExternalPlaylistName(playlist.name)\n        const icon = playlist.isMine ? <IconButton\n            id=\"editButton\"\n            onClick={this.triggerEditModal}\n            icon={<Icon icon=\"pencil\" />} appearance=\"link\" /> : null\n        return (\n            <div style={{display:\"flex\", flexFlow:\"column\", height:\"100%\", width:\"100%\"}}>\n                <div style={{ display:\"flex\", flexFlow: \"row\", padding:\"20px 20px 15px 20px\"}}>\n                    <div style={{flexGrow:1}}>\n                        <ResponsiveTitle id=\"title\">{title} {icon}</ResponsiveTitle>\n                        <p id=\"details\">{playlist.songCount} songs, {seconds_to_hhmmss(playlist.duration)} by <b>{playlist.owner}</b></p>\n                        { playlist.comment ? <p id=\"comment\">{`\"${playlist.comment}\"`}</p> : null }\n                    </div>\n                    {playlist.isMine ?\n                        <div style={{ display:\"flex\", flexFlow: \"column\"}}>\n                            <Button id=\"deleteButton\" color=\"red\" onClick={this.askDeletionConfirmation} style={{marginBottom:\"5px\"}}>Delete playlist</Button>\n                            <Button id=\"removeButton\" onClick={this.removeSelectedSongs} disabled={disableButton}>Remove from playlist</Button>\n                        </div>\n                        : null\n                    }\n                </div>\n                <SongsTableEnhanced id=\"songsComponent\" className=\"playlist-songs-container\" style={{flexGrow:1}} songs={songs} onSongsSelected={this.onSongsSelected} columns={columnsToShow} fixedHeightToFill={true} withPlaylistDropdown={false} sortable={true} />\n                {/* Playlist deletion confirmation */}\n                <DeletePlaylistModal id=\"deleteComponent\" playlistId={playlist.id} show={this.state.showDeleteModal} onHide={this.closeDeleteModal} />\n                {/* Playlist edition form */}\n                <EditPlaylistModal id=\"editComponent\" playlistId={playlist.id} show={this.state.showEditModal} onHide={this.closeEditModal} />\n            </div>\n        )\n    }\n}\n\nPlaylist.propTypes = {\n    playlistId : PropTypes.string,\n    playlist : PropTypes.object,\n    songs : PropTypes.array,\n    removeSongsFromPlaylist : PropTypes.func,\n    loadSinglePlaylist : PropTypes.func\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { removeSongsFromPlaylist, loadSinglePlaylist } from \"../../redux/actions/playlistsActions\"\nimport { songsOfPlaylistSelector } from '../../redux/selectors/songSelectors'\n// UI\nimport Playlist from './Playlist'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"playlist\" : state.playlists.byId[ownProps.playlistId],\n        \"songs\" : songsOfPlaylistSelector(state, ownProps)\n    }\n}\n\nconst mapDispatchToProps = { removeSongsFromPlaylist, loadSinglePlaylist }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Playlist)","import React from 'react'\nimport PropTypes from 'prop-types'\n// UI\nimport { Button, Modal, Form, FormGroup, FormControl, ControlLabel } from 'rsuite'\n\nexport default class CreatePlaylistModal extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { playlistNameErrorMessage : null }\n        this.newPlaylist = {name : \"\"}\n    }\n\n    closeModal = () => {\n        this.props.onClosePlaylistModal && this.props.onClosePlaylistModal()\n    }\n\n    onPlaylistFormChange = (value) => {\n        this.newPlaylist = value\n    }\n\n    closeModalAndCreate = () => {\n        if( this.newPlaylist.name.length > 0 ) {\n            this.setState({playlistNameErrorMessage : null})\n            this.props.createPlaylist( this.newPlaylist.name )\n            this.closeModal()\n        }\n        else {\n            this.setState({playlistNameErrorMessage : \"Name required\"})\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if( e.key === \"Enter\" ) {\n            this.closeModalAndCreate()\n        }\n    }\n\n    render() {\n        return (\n            <Modal id=\"modal\" backdrop=\"static\" show={this.props.showModal} onHide={this.closeModal} size=\"xs\">\n                <Modal.Header>\n                    <Modal.Title>New Playlist</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form fluid onChange={this.onPlaylistFormChange}>\n                        <FormGroup>\n                            <ControlLabel>Name</ControlLabel>\n                            <FormControl name=\"name\" errorMessage={this.state.playlistNameErrorMessage} errorPlacement=\"bottomStart\" onKeyDown={this.handleKeyDown} />\n                        </FormGroup>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button id=\"create_playlist\" onClick={this.closeModalAndCreate} appearance=\"primary\"> Create </Button>\n                    <Button id=\"close\" onClick={this.closeModal} appearance=\"subtle\"> Cancel </Button>\n                </Modal.Footer>\n            </Modal>    \n        )\n    }\n}\n\nCreatePlaylistModal.propTypes = {\n    showModal : PropTypes.bool.isRequired,\n    onClosePlaylistModal : PropTypes.func,\n    createPlaylist : PropTypes.func.isRequired,\n}\n\nCreatePlaylistModal.defaultProps = {\n    showModal : false,\n    createPlaylist : () => (null),\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { createPlaylist } from \"../../redux/actions/playlistsActions\"\n// UI\nimport CreatePlaylistModal from './CreatePlaylistModal'\n\nconst mapDispatchToProps = { createPlaylist }\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(CreatePlaylistModal)","import { createSelector } from 'reselect'\n\nconst getSearchSongsById = (state) => state.search.songsById\n\nconst getSearchSongsIds = (state) => state.search.songs\n\nexport const searchSongsSelector = createSelector(\n    [getSearchSongsById, getSearchSongsIds],\n    (songs, songIds) => songIds.map(id => songs[id])\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// UI\nimport SongsTable from '../SongsTable/SongsTable'\nimport SongsTableEnhanced from '../SongsTableEnhanced'\n\nconst SONG_COLUMNS_TO_SHOW = [SongsTable.columns.selectable, SongsTable.columns.title, SongsTable.columns.artist, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.download]\n\nexport default function SearchSongResult(props) {\n    const songs = props.songs\n    return (\n        <SongsTableEnhanced style={{marginBottom:\"20px\"}} songs={songs} columns={SONG_COLUMNS_TO_SHOW} sortable={true} />\n    )\n}\n\nSearchSongResult.propTypes = {\n    songs : PropTypes.array.isRequired\n}","import SearchSongResult from './SearchSongResult'\n\nexport default SearchSongResult","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Results\nimport AlbumResult from \"../SearchAlbumResult\"\nimport ArtistElement from \"../ArtistListElement\"\nimport SongsResult from \"../SearchSongResult\"\n// UI\nimport SearchBar from \"../SearchBar\"\nimport { Col } from 'rsuite'\n\nexport default class SearchView extends React.Component {\n\n    render() {\n        const albums = this.props.albums || []\n        const artists = this.props.artists || []\n        const songs = this.props.songs || []\n        return (\n            <div style={{padding:\"20px\", display:\"flex\", flexDirection:\"column\", height:\"100%\", overflow:\"auto\"}}>\n                <Col className=\"rs-hidden-lg rs-hidden-md\">\n                    <SearchBar />\n                </Col>\n\n                {\n                    /* Case where there are no results */\n                    (artists.length === 0 && albums.length === 0 && songs.length === 0)\n                    ? <h1>No results</h1>\n                    : null\n                }\n\n                {\n                    /* Artists section */\n                    artists.length > 0 ? \n                        <React.Fragment>\n                            <h1 style={{display:\"contents\"}}>Artists</h1>\n                            <div style={{display:\"flex\", flexDirection:\"row\", flexWrap:\"wrap\"}}>\n                                { artists.map( a => <ArtistElement key={a.id} artist={a}/> )}\n                            </div>\n                        </React.Fragment>\n                     : null\n                }\n                \n                {\n                    albums.length > 0 ? (\n                        <React.Fragment>\n                            <h1 style={{display:\"contents\"}}>Albums</h1>\n                            <div className=\"result-grid-container\" >\n                                { albums.map(a => \n                                    <div key={a.id} className=\"result-item\">\n                                        <AlbumResult album={a} />\n                                    </div>\n                                )}\n                            </div>\n                        </React.Fragment>\n                    ) : null\n                }\n\n                {\n                    songs.length > 0 ? (\n                        <React.Fragment>\n                            <h1 style={{display:\"contents\"}}>Songs</h1>\n                            <SongsResult songs={songs} />\n                        </React.Fragment>\n                    ) : null\n                }\n\n            </div>\n        )\n    }\n}\n\nSearchView.propTypes = {\n    \"artists\" : PropTypes.array,\n    \"albums\" : PropTypes.array,\n    \"songs\" : PropTypes.array,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { search } from \"../../redux/actions/searchActions\"\nimport { searchSongsSelector } from '../../redux/selectors/searchSelectors'\n// UI\nimport SearchView from './SearchView'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"artists\" : state.search.artists,\n        \"albums\" : state.search.albums,\n        \"songs\" : searchSongsSelector(state)\n    }\n}\n\nconst mapDispatchToProps = { search }\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SearchView)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Utils\nimport { seconds_to_hhmmss } from \"../../utils/formatting.js\"\n// UI\nimport SongsTableEnhanced from '../SongsTableEnhanced'\nimport { Button } from 'rsuite'\nimport SongsTable from '../SongsTable/SongsTable'\n\nconst COLUMNS_TO_SHOW = [SongsTable.columns.selectable, SongsTable.columns.title, SongsTable.columns.artist, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.download, SongsTable.columns.starred]\n\nexport default class FavouritesView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { selectedSongs : [], duration : 0 }\n    }\n\n    componentDidMount() {\n        this.props.loadFavouriteSongs()\n    }\n\n    componentDidUpdate(prevProps) {\n        if( prevProps.songs.length !== this.props.songs.length ) {\n            this.setState({selectedSongs: [], duration : this.props.songs.reduce( (a,b) => ({duration: a.duration+b.duration}), {duration:0} ).duration})\n        }\n    }\n\n    /* Listeners */\n\n    onSongsSelected = (selectedSongs) => {\n        this.setState({selectedSongs: selectedSongs})\n    }\n\n    removeSelectedSongs = () => {\n        if( this.state.selectedSongs.length > 0 ) {\n            this.props.setStarOnSongs(this.state.selectedSongs, false)\n        }\n    }\n\n    render() {\n        const songs = this.props.songs\n        const duration = this.state.duration\n        const disableButton = this.state.selectedSongs && this.state.selectedSongs.length === 0\n        return (\n            <div style={{display:\"flex\", flexFlow:\"column\", padding:\"20px\", height:\"100%\", width:\"100%\" }}>\n                <div style={{ display:\"flex\", flexFlow: \"row\", marginBottom:\"15px\"}}>\n                    <div style={{flexGrow:1}}>\n                        <h1 style={{fontWeight: \"bold\"}}>Favourites</h1>\n                        <span id=\"description\">{ songs.length } songs, {seconds_to_hhmmss(duration)}</span>\n                    </div>\n                    <div style={{ display:\"flex\", flexFlow: \"column\"}}>\n                        <Button id=\"removeFromFavourites\" onClick={this.removeSelectedSongs} disabled={disableButton}>Remove from favourites</Button>\n                    </div>\n                </div>\n                <SongsTableEnhanced style={{flexGrow:1}} songs={songs} onSongsSelected={this.onSongsSelected} columns={COLUMNS_TO_SHOW} fixedHeightToFill={true} withPlaylistDropdown={false} sortable={true} />\n            </div>\n        )\n    }\n}\n\nFavouritesView.propTypes = {\n    loadFavouriteSongs : PropTypes.func.isRequired,\n    setStarOnSongs : PropTypes.func,\n    songs : PropTypes.array,\n\n}\n\nFavouritesView.defaultProps = {\n    songs : []\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { loadFavouriteSongs, setStarOnSongs } from \"../../redux/actions/favouritesActions\"\nimport { favouriteSongsSelector } from '../../redux/selectors/songSelectors'\n// UI\nimport FavouritesView from './FavouritesView'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"songs\" : favouriteSongsSelector(state)\n    }\n}\n\nconst mapDispatchToProps = { loadFavouriteSongs, setStarOnSongs }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FavouritesView)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Utils\nimport { seconds_to_hhmmss } from \"../../utils/formatting.js\"\n// UI\nimport \"./QueueView.less\"\nimport SongsTable from '../SongsTable/SongsTable'\nimport SongsTableEnhanced from '../SongsTableEnhanced'\nimport { Button, IconButton, Icon } from 'rsuite'\nimport ResponsiveTitle from '../ResponsiveTitle' \n\nconst COLUMNS_TO_SHOW = [SongsTable.columns.title, SongsTable.columns.artist, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.selectable, SongsTable.columns.download]\n\nexport default class QueueView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {selectedSongs : []}\n    }\n\n    onSongsSelected = (selectedSongs) => {\n        this.setState({selectedSongs: selectedSongs})\n    }\n\n    removeSongsFromQueue = () => {\n        this.props.removeSongsFromQueue && this.props.removeSongsFromQueue(this.state.selectedSongs)\n    }\n\n    clearQueue = () => {\n        this.props.clearQueue && this.props.clearQueue()\n    }\n\n    onSongClicked = (song) => {\n        this.props.seekToSongInQueue && this.props.seekToSongInQueue(song)\n    }\n\n    render() {\n        const songs = this.props.songs\n        const duration = songs.reduce( (accum, current) => accum + current.duration, 0 )\n        const disableButton = this.state.selectedSongs && this.state.selectedSongs.length === 0\n        return (\n            <div style={{display:\"flex\", flexFlow:\"column\", height:\"100%\", width:\"100%\"}}>\n                <div style={{ display:\"flex\", flexFlow: \"row\", padding:\"20px 20px 15px 20px\"}}>\n                    <div style={{flexGrow:1}}>\n                        <ResponsiveTitle>Playing Queue</ResponsiveTitle>\n                        <p id=\"details\">{songs.length} songs, {seconds_to_hhmmss(duration)}</p>\n                    </div>\n                    <div style={{ display:\"flex\", flexFlow: \"column\"}}>\n                        <IconButton id=\"clear_button\" onClick={this.clearQueue} style={{marginBottom:\"5px\"}} placement=\"right\" icon={<Icon icon=\"trash\"/>}>Clear</IconButton>\n                        <Button id=\"remove_button\" onClick={this.removeSongsFromQueue} disabled={disableButton}>Remove</Button>\n                    </div>\n                </div>\n                <SongsTableEnhanced\n                    id=\"songs_table\"\n                    className=\"queue-songs-container\"\n                    style={{flexGrow:1}}\n                    songs={songs}\n                    onSongsSelected={this.onSongsSelected}\n                    columns={COLUMNS_TO_SHOW}\n                    fixedHeightToFill={true}\n                    withPlaylistDropdown={false}\n                    withSearchFilter={false}\n                    sortable={false}\n                    showPlayButton={false}\n                    onSongClicked={this.onSongClicked} />\n            </div>\n        )\n    }\n}\n\nQueueView.propTypes = {\n    songs : PropTypes.array,\n    clearQueue : PropTypes.func,\n    removeSongsFromQueue : PropTypes.func,\n    seekToSongInQueue : PropTypes.func,\n}\n\nQueueView.defaultProps = {\n    songs : [],\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { clearQueue, removeSongsFromQueue, seekToSongInQueue  } from \"../../redux/actions/songsActions\"\nimport { getSongsInQueueSelector } from '../../redux/selectors/musicPlayerSelector'\n// UI\nimport QueueView from './QueueView'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"songs\" : getSongsInQueueSelector(state, ownProps)\n    }\n}\n\nconst mapDispatchToProps = { clearQueue, removeSongsFromQueue, seekToSongInQueue }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(QueueView)","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport * as alerts from \"../../redux/actions/alertsActions\"\n// UI\nimport { Alert } from 'rsuite'\n\nexport default class AlertsManager extends React.Component {\n\n    componentDidUpdate(prevProps) {\n        // Only show alerts if there is a new alert pending to show\n        const alertToShow = this.props.alertToShow\n        if( prevProps.alertToShow.id !== alertToShow.id){\n            // Check which is the correct case of alert to display\n            switch(alertToShow.type) {\n                case alerts.ALERT_TYPE_SUCCESS:\n                    Alert.success(alertToShow.message)\n                    break\n                case alerts.ALERT_TYPE_WARNING:\n                    Alert.warning(alertToShow.message)\n                    break\n                default:\n                    Alert.error(alertToShow.message)\n            }\n        }\n    }\n\n    render = () => null\n}\n\nAlertsManager.propTypes = {\n    alertToShow : PropTypes.object\n}","// Redux\nimport { connect } from \"react-redux\"\n// UI\nimport AlertsManager from './AlertsManager'\n\nconst mapStateToProps = (state) => {\n    return {\n        alertToShow : state.alert\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(AlertsManager)","import React from \"react\"\nimport PropTypes from 'prop-types'\n// Utils\nimport subsonic from \"../../api/subsonicApi\"\n// UI\nimport { Grid, Row, Col } from 'rsuite'\nimport AlbumResult from \"../SearchAlbumResult\"\nimport \"./RecentlyAddedView.less\"\n\nexport default class RecentlyAddedView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {albums : []}\n    }\n\n    componentDidMount = async () => {\n        // Get the newest albums from Subsonic\n        this.props.beginAsyncTask()\n        try {\n            const albums = await subsonic.getAlbumList2(\"newest\")\n            this.props.asyncTaskSuccess()\n            this.setState({albums})\n        }\n        catch(err) {\n            console.log(err)\n            this.props.asyncTaskError(\"Unable to load recently added albums\")\n        }\n    }\n\n    render() {\n        const albums = this.state.albums\n        return (\n            <Grid fluid style={{padding: \"20px\"}}>\n                <Row>\n                    <Col md={24} lg={24}>\n                        <h1 style={{fontWeight:\"bold\", display: \"inline-block\"}}>Recently Added</h1>\n                    </Col>\n                    <Col md={24} className=\"result-grid-container\" >\n                        { albums.map(a => \n                            <div key={a.id} className=\"result-item\">\n                                <AlbumResult album={a} />\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n            </Grid>\n        )\n    }\n}\n\nRecentlyAddedView.propTypes = {\n    beginAsyncTask: PropTypes.func,\n    asyncTaskSuccess: PropTypes.func,\n    asyncTaskError : PropTypes.func,\n}\n\nRecentlyAddedView.defaultProps = {\n    beginAsyncTask: () => null,\n    asyncTaskSuccess: () => null,\n    asyncTaskError : () => null,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport {beginAsyncTask, asyncTaskSuccess, asyncTaskError } from \"../../redux/actions/apiStatusActions\"\n// UI\nimport RecentlyAddedView from './RecentlyAddedView'\n\nconst mapDispatchToProps = { beginAsyncTask, asyncTaskSuccess, asyncTaskError }\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(RecentlyAddedView)","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\n\nexport function loginUserRequest() {\n    return { type: types.LOGIN_USER_REQUEST }\n}\n\nexport function loginUserSuccess(host, username, enc) {\n    localStorage.setItem('host', host)\n    localStorage.setItem('username', username)\n    localStorage.setItem('enc', enc)\n    // Update subsonic API\n    subsonic.setConfig(host, username, enc, false)\n    // Log in\n    return {\n        type: types.LOGIN_USER_SUCCESS,\n    }\n}\n\nexport function loginUserFailure(error) {\n    localStorage.removeItem('host')\n    localStorage.removeItem('username')\n    localStorage.removeItem('enc')\n    return {\n        type: types.LOGIN_USER_FAILURE,\n        payload: {\n            statusText: error.message\n        }\n    }\n}\n\nexport function loginUser(host, username, password, encodePassword = true) {\n    return async (dispatch) => {\n        dispatch(loginUserRequest())\n        // Sanitize host removing trialing /\n        host = host.replace(/\\/$/, '')\n        // Perform login\n        try {\n            const success = await subsonic.login(host, username, password, encodePassword)\n            if( success ) {\n                const passwordToStore = encodePassword ? subsonic.getEncodedPassword(password) : password\n                dispatch(loginUserSuccess(host, username, passwordToStore))\n            }\n            else {\n                dispatch(loginUserFailure({statusText:\"Authentication failed\"}))\n            }\n        }\n        catch(err) {\n            console.error(err)\n            dispatch(loginUserFailure(err))\n        }\n        \n    }\n}\n\nexport function lazyLoginUser() {\n    // Check if we have credentials stored and try to log in existing user\n    const host = localStorage.getItem('host')\n    const username = localStorage.getItem('username')\n    const enc = localStorage.getItem('enc')\n    if( host && username && enc ) {\n        return loginUser(host, username, enc, false)\n    }\n    return {type: types.LAZY_LOGIN_IGNORE}\n}\n\nexport function logout() {\n    localStorage.clear()\n    return { type: types.LOGOUT_USER }\n}","\nexport function getAvailableThemes() {\n    return require('../themes.config')\n}\n\nexport function formatName(name) {\n    let result = name\n    // Show as light or dark theme\n    const normalized = name.toLowerCase()\n    if(isThemeLight(name)){\n        result = `Light ${normalized.split(\"light\")[1]}`\n    }\n    else if(isThemeDark(name)){\n        result = `Dark ${normalized.split(\"dark\")[1]}`\n    }\n    return result  \n}\n\nexport function isThemeLight(name) {\n    return name.toLowerCase().startsWith(\"light\")\n}\n\nexport function isThemeDark(name) {\n    return name.toLowerCase().startsWith(\"dark\")\n}\n\nexport function getThemeType(name){\n    let result = \"\"\n    if(isThemeLight(name)){\n        result = \"light\"\n    }\n    else if(isThemeDark(name)){\n        result = \"dark\"\n    }\n    return result   \n}\n\nexport function changeTheme(theme) {\n\t// Replace theme in memory\n\tlocalStorage.setItem('theme', theme)\n\t// Load new theme\n\tloadTheme(theme)\n}\n\nexport function loadTheme(theme) {\n\tconst file = `${process.env.PUBLIC_URL}/css/${theme}.css`\n\t// Put stylesheet in the document\n    const link = document.createElement('link')\n    link.rel = 'stylesheet';\n    link.href = file;\n    link.dataset.theme = theme;\n    document.head.appendChild(link)\n}\n\nexport function initTheme() {\n\tconst savedTheme = localStorage.getItem('theme') \n\tconst defaultTheme = \"darkOrange\"\n\tloadTheme(savedTheme || defaultTheme)\n}","// UI\nimport ThemePicker from './ThemePicker'\n\nexport default ThemePicker","import React from 'react'\nimport PropTypes from 'prop-types'\n// UI\nimport { Avatar, Col } from 'rsuite'\nimport \"./ThemePicker.less\"\n// Utils\nimport * as utils from \"../../utils/theming\"\n\nexport default class ThemePicker extends React.Component {\n\n    render() {\n        const themes = this.props.themes || {}\n        return (\n            <>\n                {\n                    Object.keys(themes).map( name => (\n                        <Col key={name} className=\"theme-element\" sm={8} xs={12} onClick={ (e) => {utils.changeTheme(name)} }>\n                            <Avatar className={`theme-element-color-${utils.getThemeType(name)}`} style={{ background: themes[name][\"base-color\"], verticalAlign:\"middle\" }} circle/>\n                            <span data-theme-name={name} style={{verticalAlign:\"middle\", marginLeft:\"10px\"}}>{utils.formatName(name)}</span>\n                        </Col>\n                    ))\n                }\n            </>\n        )\n    }\n\n}\n\nThemePicker.propTypes = {\n    themes : PropTypes.object\n}","// UI\nimport SidebarSettings from './SidebarSettings'\n\nexport default SidebarSettings","import React, {useEffect, useState} from \"react\"\nimport { CheckboxGroup, Checkbox } from 'rsuite'\n// settings\nimport * as settings from \"../../utils/settings\"\n\nexport default function SidebarSettings(props) {\n    const allOptions = settings.POSSIBLE_SIDEBAR_LINKS\n    const [value, setValue] = useState([])\n\n    // load from settings\n    useEffect(() => {\n        setValue(settings.getSidebarDisplaySettings().map(s => s.key))\n    }, [])\n\n    // update settings\n    function update_settings(newValue) {\n        setValue(newValue)\n        settings.setSidebarDisplaySettings(allOptions.filter(o => newValue.includes(o.key)))\n    }\n\n    return (\n        <div style={{...props.style, lineHeight:\"2.5em\"}}>\n            <CheckboxGroup name=\"genresCheckboxList\" value={value} onChange={update_settings}>\n                <p>Select the items to display in the sidebar (NOTE: you need to refresh the site for these changes to take effect)</p>\n                {\n                    allOptions.map(option => (\n                        <Checkbox key={option.key} value={option.key}>\n                            {option.text}\n                        </Checkbox>\n                    ))\n                }\n            </CheckboxGroup>\n        </div>\n    )\n}","// UI\nimport ScrobbleSetting from './ScrobbleSetting'\n\nexport default ScrobbleSetting","import React, {useEffect, useState} from \"react\"\nimport { Toggle } from 'rsuite'\n// settings\nimport * as settings from \"../../utils/settings\"\n\nexport default function ScrobbleSetting(props) {\n    const [value, setValue] = useState(true)\n\n    // load from settings\n    useEffect(() => {\n        const isScrobbling = settings.getIsScrobbling()\n        setValue(isScrobbling)\n    }, [])\n\n    // update settings\n    function update_settings(value) {\n        settings.setIsScrobbling(value)\n        setValue(value)\n    }\n\n    return (\n        <div style={{...props.style, lineHeight:\"2.5em\"}}>\n            Scrobble? <Toggle style={{marginLeft:\"10px\"}} checked={value} onChange={update_settings} />\n        </div>\n    )\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n// UI\nimport ThemePicker from '../ThemePicker'\nimport SidebarSettings from '../SidebarSettings'\nimport ScrobbleSetting from '../ScrobbleSetting'\nimport { Button, Row, Col, Divider } from 'rsuite'\n// Utils\nimport * as utils from \"../../utils/theming\"\n\nexport default class SettingsView extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.themes = utils.getAvailableThemes()\n    }\n\n    onLogOut = () => {\n        this.props.logout()\n    }\n\n    render() {\n        const themes = this.themes\n        return (\n            <div style={{display:\"flex\", flexDirection:\"column\", padding:\"20px\", height:\"100%\", overflow:\"auto\"}}>\n                <Row><h1>Settings</h1></Row>\n                {/*Scrobble*/}\n                <ScrobbleSetting />\n                {/* Theme picker */}\n                <h4 style={{marginTop:\"15px\"}}>Theme Picker</h4>\n                <Row>\n                    <ThemePicker themes={themes} />\n                </Row>\n                {/* Items to display in the sidebar */}\n                <h4 style={{marginTop:\"15px\"}}>Sidebar settings</h4>\n                <Row>\n                    <SidebarSettings />\n                </Row>\n                {/*Log out*/}\n                <div style={{flex:1}} />\n                <Row>\n                    <Col md={24}>\n                        <Divider />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={24} md={8} mdOffset={8}>\n                        <Button id=\"logoutButton\" appearance=\"primary\" onClick={this.onLogOut} block={true} size=\"lg\" >Log out</Button>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n\n}\n\nSettingsView.propTypes = {\n    logout : PropTypes.func.isRequired\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { logout } from \"../../redux/actions/authActions\"\n// UI\nimport SettingsView from './SettingsView'\n\nconst mapDispatchToProps = { logout }\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SettingsView)","import * as types from \"./actionTypes\"\nimport subsonic from \"../../api/subsonicApi\"\nimport { beginAsyncTask, asyncTaskSuccess, asyncTaskError } from \"./apiStatusActions\"\n\nasync function performGenreRequests(genre) {\n    // Load all the songs of this genre in chunks of 500 (max allowed by Subsonic API)\n    let offsets = []\n    let count = 0\n    while( count < genre.songCount ) {\n        offsets.push([count])\n        count += 500\n    }\n    // Create a \"big\" promise to fetch all the songs and return\n    // just one result with all the content\n    return Promise.all( offsets.map(offset => subsonic.getSongsByGenre(genre.value, offset)) )\n        .then(response => {\n            // Combine all the songs in one single result\n            return response.reduce( (accum, current) => accum.concat(current), [] )\n        })\n}\n\nexport const loadSongsOfGenreSuccess = songs => ({type : types.LOAD_SONGS_OF_GENRE_SUCCESS, payload: { songs : songs} })\n\nexport function loadSongsOfGenre(genre) {\n    return async (dispatch) => {\n        dispatch(beginAsyncTask())\n        try {\n            const songs = await performGenreRequests(genre)\n            dispatch(loadSongsOfGenreSuccess(songs))\n            dispatch(asyncTaskSuccess())\n        }\n        catch(error) {\n            console.error(error)\n            dispatch(asyncTaskError(\"Unable to load genre\"))\n        }\n    }\n}","import React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\n// UI\nimport SongsTable from '../SongsTable/SongsTable'\nimport SongsTableEnhanced from '../SongsTableEnhanced'\n\nconst COLUMNS_TO_SHOW = [SongsTable.columns.title, SongsTable.columns.artist, SongsTable.columns.album, SongsTable.columns.duration, SongsTable.columns.bitRate, SongsTable.columns.download, SongsTable.columns.selectable]\n\nexport default function GenreSongs(props) {\n    const { genre, loadSongsOfGenre, songs, ...rest } = props\n\n    useEffect(()=> {\n        if( genre !== null) {\n            loadSongsOfGenre(genre)\n        }\n    }, [genre, loadSongsOfGenre])\n\n    return (\n        <SongsTableEnhanced {...rest} songs={songs} columns={COLUMNS_TO_SHOW} fixedHeightToFill={true} withPlaylistDropdown={true} sortable={true} />\n    )\n}\n\nGenreSongs.propTypes = {\n    genre: PropTypes.object,\n    loadSongsOfGenre: PropTypes.func,\n    songs : PropTypes.array,\n}\n\nGenreSongs.defaultProps = {\n    genre: null,\n    loadSongsOfGenre: () => null,\n    songs: []\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { loadSongsOfGenre } from \"../../redux/actions/genresActions\"\nimport { songsOfGenreSelector } from '../../redux/selectors/songSelectors'\n// UI\nimport GenreSongs from './GenreSongs'\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        \"songs\" : songsOfGenreSelector(state, ownProps)\n    }\n}\n\nconst mapDispatchToProps = { loadSongsOfGenre }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GenreSongs)","import GenresView from './GenresView'\n\nexport default GenresView","import React, {useState} from 'react'\n// UI\nimport ResponsiveTitle from '../ResponsiveTitle' \nimport GenreSongs from '../GenreSongs/'\nimport GenresPicker from \"../GenresPicker\"\nimport { Col } from 'rsuite'\n\nexport default function GenresView(props) {\n    const [genre, setGenre] = useState({})\n\n    return (\n        <div style={{display:\"flex\", flexFlow:\"column\", height:\"100%\", width:\"100%\", padding:\"20px\"}}>\n            <div style={{display:\"inline-flex\", flexWrap:\"wrap\", alignItems:\"center\"}}>\n                <Col sm={24} md={18}>\n                    <ResponsiveTitle style={{fontWeight: \"bold\"}}>Genres</ResponsiveTitle>\n                </Col>\n                <Col sm={24} md={6}>\n                    <GenresPicker style={{height:\"fit-content\", flexGrow:1}} displaySongCount onGenreChanged={setGenre} placement=\"bottomEnd\" block />\n                </Col>\n            </div>\n            <div style={{display:\"flex\", flex:1}}>\n                <GenreSongs style={{width:\"100%\"}} genre={genre} />\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from \"react-redux\"\nimport { Router } from \"@reach/router\"\nimport { loadPlaylists } from \"./redux/actions/playlistsActions\"\n// UI\nimport { Container, Content, Footer, Sidebar, Header } from 'rsuite'\nimport MySidebar from './components/Sidebar'\nimport Navbar from './components/Navbar'\nimport MusicPlayer from './components/MusicPlayer'\nimport InfiniteLineLoader from './components/InfiniteLineLoader'\nimport ArtistsList from './components/ArtistsList'\nimport AlbumsList from './components/AlbumsList'\nimport Artist from './components/Artist'\nimport AlbumView from './components/AlbumView'\nimport Playlist from './components/Playlist'\nimport CreatePlaylistModal from './components//CreatePlaylistModal'\nimport SearchView from './components/SearchView'\nimport FavouritesView from './components/FavouritesView'\nimport Queue from './components/QueueView'\nimport AlertsManager from './components/AlertsManager'\nimport RecentlyAdded from './components/RecentlyAddedView'\nimport Settings from './components/SettingsView'\nimport GenresView from './components/GenresView'\n// import main styles\nimport \"./App.less\"\n\nexport class App extends React.Component  {\n\n  constructor(props) {\n    super(props)\n    this.state = { showModal : false }\n  }\n\n  componentDidMount() {\n    this.props.loadPlaylists()\n  }\n\n  onCreatePlaylist = () => {\n    this.setState({showModal : true})\n  }\n\n  onClosePlaylistModal = () => {\n    this.setState({showModal : false})\n  }\n\n  render() {\n    return (\n      <Container style={{ display : \"flex\", height: \"100vh\", flexDirection:\"column\" }}>\n        { /* Navbar for mobile navigation */ }\n        <Header className=\"rs-hidden-lg rs-hidden-md\">\n          <Navbar id=\"mobileNavbar\" onCreatePlaylistTrigger={this.onCreatePlaylist} />\n        </Header>\n        <InfiniteLineLoader id=\"loader\" isLoading={this.props.asyncTasksInProgress > 0 } />\n        { /* Main content */ }\n        <Container style={{flex: 1, \"overflow\":\"auto\"}}>\n          <Sidebar className=\"rs-hidden-xs rs-hidden-sm\">\n            <MySidebar id=\"sidebar\" onCreatePlaylistTrigger={this.onCreatePlaylist} />\n          </Sidebar>\n          <Content className=\"main-content\" style={{\"overflow\":\"auto\"}}>\n            <Router style={{height:\"100%\"}}>\n                <RecentlyAdded path=\"/latest\" default/>\n                <ArtistsList path=\"/artists\"/>\n                <Artist path=\"/artists/:artistId\"/>\n                <AlbumsList path=\"/album\"/>\n                <AlbumView path=\"/album/:albumId\"/>\n                <Playlist path=\"/playlist/:playlistId\"/>\n                <SearchView path=\"/search\"/>\n                <FavouritesView path=\"/favourites\" />\n                <Queue path=\"/queue\" />\n                <Settings path=\"/settings\" />\n                <GenresView path=\"/genres\" />\n            </Router>\n          </Content>\n        </Container>\n        { /* music player */ }\n        <Footer>\n          <MusicPlayer />\n        </Footer>\n        { /* playlist creation modal */ }\n        <CreatePlaylistModal id=\"createPlaylistModal\" showModal={this.state.showModal} onClosePlaylistModal={this.onClosePlaylistModal} />\n        { /* component to handle the alerts */ }\n        <AlertsManager />\n      </Container>\n    )\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        asyncTasksInProgress : state.asyncTasksInProgress,\n    }\n}\n\nconst mapDispatchToProps = { loadPlaylists }\n\nApp.propTypes = {\n    asyncTasksInProgress : PropTypes.number,\n    loadPlaylists : PropTypes.func.isRequired,\n}\n\nApp.defaultProps = {\n    asyncTasksInProgress : 0\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App)","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport { Redirect } from \"@reach/router\"\n// UI\nimport { Loader } from 'rsuite';\n\nexport default class AuthenticatedComponent extends React.Component {\n\n    componentDidMount() {\n        // Check if we need to lazy login\n        if( !this.props.isAuthenticated ) {\n            this.props.lazyLoginUser && this.props.lazyLoginUser()\n        }\n    }\n\n    render() {\n        const authenticatingView = (<div id=\"loading\" style={{height:\"100vh\", display:\"flex\"}}><Loader style={{margin:\"auto\"}} size=\"lg\" content=\"Loading...\" vertical /></div>)\n        return (\n            <div>\n                {\n                    this.props.isAuthenticating === true\n                        ? authenticatingView : (\n                            this.props.isAuthenticated === true\n                                ? this.props.children\n                                : <Redirect to=\"/login\" noThrow/>  \n                        )\n                }\n            </div>\n        )\n\n    }\n}\n\nAuthenticatedComponent.propTypes = {\n    isAuthenticated : PropTypes.bool.isRequired,\n    isAuthenticating : PropTypes.bool.isRequired,\n    lazyLoginUser : PropTypes.func\n}\n\nAuthenticatedComponent.defaultProps = {\n    isAuthenticated : false,\n    isAuthenticating : false,\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { lazyLoginUser } from \"../../redux/actions/authActions\"\n// UI\nimport AuthenticatedComponent from './AuthenticatedComponent'\n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    isAuthenticating: state.auth.isAuthenticating\n})\n\nconst mapDispatchToProps = { lazyLoginUser }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AuthenticatedComponent)","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport { navigate } from \"@reach/router\"\n// UI\nimport { Panel, Button, Form, FormGroup, FormControl, ControlLabel, HelpBlock, Alert } from 'rsuite'\n\nexport default class LoginView extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.user = {}\n        this.state = {\n            hostErrorMessage : null,\n            userErrorMessage : null,\n            passwordErrorMessage : null\n        }\n    }\n\n    componentDidMount() {\n        // Check if we need to lazy login\n        if( !this.props.isAuthenticated ) {\n            this.props.lazyLoginUser && this.props.lazyLoginUser()\n        }\n        else {\n            navigate(\"/latest\", { replace: true })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        // Check if we were waiting for an authentication update\n        if( prevProps.isAuthenticating && !this.props.isAuthenticating ) {\n            if( this.props.isAuthenticated ) {\n                navigate(\"/latest\", { replace: true })\n            }\n            else if(this.props.statusText) {\n                Alert.error(this.props.statusText, 3000)\n            }\n        }\n    }\n\n    onUserDataChange = (value) => {\n        this.user = value\n    }\n\n    login = () => {\n        // Do not submit form until data is checked\n        let valid = true\n        // Check host\n        let hostErrorMessage = null\n        if( !this.user.host ) {\n            valid = false\n            hostErrorMessage = \"Required\"\n        }\n        // Check user\n        let userErrorMessage = null\n        if( !this.user.username ) {\n            valid = false\n            userErrorMessage = \"Required\"\n        }\n        // Check user\n        let passwordErrorMessage = null\n        if( !this.user.password ) {\n            valid = false\n            passwordErrorMessage = \"Required\"\n        }\n        this.setState({\n            hostErrorMessage : hostErrorMessage,\n            userErrorMessage : userErrorMessage,\n            passwordErrorMessage : passwordErrorMessage\n        })\n        // Log in\n        if( valid ){\n            this.props.loginUser(this.user.host, this.user.username, this.user.password)\n        }\n    }\n\n    render() {\n        // Render all\n        return (\n            <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\", height:\"100vh\"}}>\n                <Panel bordered shaded>\n                    <Form onChange={this.onUserDataChange} onSubmit={this.login}>\n                        <FormGroup>\n                            <ControlLabel>Host</ControlLabel>\n                            <FormControl name=\"host\" type=\"url\" errorMessage={this.state.hostErrorMessage} errorPlacement=\"bottomStart\"/>\n                            <HelpBlock>http://HOST:PORT</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Username</ControlLabel>\n                            <FormControl name=\"username\" errorMessage={this.state.userErrorMessage} errorPlacement=\"bottomStart\"/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Password</ControlLabel>\n                            <FormControl name=\"password\" type=\"password\" errorMessage={this.state.passwordErrorMessage} errorPlacement=\"bottomStart\"/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Button type=\"submit\" appearance=\"primary\" loading={this.state.isAuthenticating} block>Log In</Button>\n                        </FormGroup>\n                      </Form>\n                  </Panel>\n            </div>\n        )\n    }\n}\n\nLoginView.propTypes = {\n    isAuthenticated : PropTypes.bool.isRequired,\n    isAuthenticating : PropTypes.bool.isRequired,\n    statusText : PropTypes.string,\n    loginUser : PropTypes.func.isRequired,\n    lazyLoginUser : PropTypes.func,\n}\n\nLoginView.defaultProps = {\n    isAuthenticated : false,\n    isAuthenticating : false,\n    statusText: null,\n    loginUser: () => (null)\n}\n","// Redux\nimport { connect } from \"react-redux\"\nimport { loginUser, lazyLoginUser } from \"../../redux/actions/authActions\"\n// UI\nimport LoginView from './LoginView'\n\nconst mapStateToProps = (state) => ({\n    isAuthenticating   : state.auth.isAuthenticating,\n    isAuthenticated: state.auth.isAuthenticated,\n    statusText         : state.auth.statusText,\n})\n\nconst mapDispatchToProps = { loginUser, lazyLoginUser }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginView)","import React from 'react'\nimport App from './App'\nimport { Router } from \"@reach/router\"\n// Redux imports\nimport { Provider } from 'react-redux'\nimport configureStore from \"./redux/configureStore\"\n// My components\nimport AuthenticatedComponent from './components/AuthenticatedComponent'\nimport Login from './components/LoginView'\n\n// Default components\nconst NotFound = () => <p>404! Sorry, nothing here</p>\n// Init app \nconst store = configureStore()\n\nexport default (props) => (\n    <Provider store={store}>\n        <Router>\n            <NotFound default />\n            <Login path=\"/login\" />\n            <AuthenticatedComponent path=\"/\">\n                <App default/>\n            </AuthenticatedComponent>\n        </Router>\n    </Provider>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n// Main component\nimport Main from \"./Main.js\"\n// Theming\nimport * as theming from \"./utils/theming\"\n\n// Init app \ntheming.initTheme()\nReactDOM.render(\n    <Main />,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()","import * as settings from \"../../utils/settings\"\n\nexport default {\n    asyncTasksInProgress: 0,\n    alert : {},\n    artists : {\n        byIndex : [],\n        byId : {}\n    },\n    albums : {\n        byId : {}\n    },\n    playlists : {\n        byId : {}\n    },\n    favourites : [],\n    songs : {\n        byId : {}\n    },\n    musicPlayer : {\n        queue : [],\n        original : [],\n        songsById : {},\n        currentSongIndex : null,\n        currentSongId : null,\n        isShuffleOn: settings.getIsShuffleOn(),\n    },\n    auth : {\n        isAuthenticated: false,\n        isAuthenticating: true,\n        statusText: null\n    },\n    search : {\n        albums : [],\n        artists : [],\n        songs : [],\n        songsById : {}\n    }\n}","export function createReducer(initialState, reducerMap) {\n    return (state = initialState, action) => {\n        const reducer = reducerMap[action.type]\n        return reducer\n            ? reducer(state, action.payload)\n            : state\n    }\n}\n\nexport function normalize_songs_processor(song, dict) {\n    dict[song.id] = song\n    return dict\n}\n\nexport function original_songs_processor(song, list) {\n    list.push(song.id)\n    return list\n}\n\nexport function get_normalized_songs(songs) {\n    // Transform the array of songs coming in the payload to a normalized object\n    return songs.reduce( (current,song) => normalize_songs_processor(song, current), {} )\n}\n\nexport function set_starred_song_on_state(currentState, songskey, songId, starred) {\n    let newState = currentState\n    if( newState[songskey][songId] ) {\n        newState = {\n            ...newState,\n            [songskey] : {\n                ...newState[songskey],\n                [songId] : {\n                    ...newState[songskey][songId],\n                    starred : starred\n                }\n            }\n        }\n    }\n    return newState\n}\n\nexport function get_shuffled_songs(songs, songToPlayId, processor=null) {\n    let getCurrentId = songs[0] && songs[0].id ? ((current) => current.id) : ((current) => current)\n    // build a list with the ids of the songs to play\n    let newList = songs.reduce(function(accum, current) {\n        // do some other processing to the songs if needed\n        processor && processor(current)\n        // remove the song to play as it will be placed\n        const currentId = getCurrentId(current)\n        if (currentId !== songToPlayId) {\n            return accum.concat(currentId)\n        }\n        return accum\n    }, [])\n    // shuffle it\n    newList.sort(() => Math.random() - 0.5)\n    // place the songToPlayId at the beginning of the queue\n    return songToPlayId ? [songToPlayId, ...newList] : newList\n}\n\nexport function get_ordered_songs(songs, songToPlayId, processor=null) {\n    let found = false\n    // check if the array is of objects or of IDs\n    let getCurrentId = songs[0] && songs[0].id ? ((current) => current.id) : ((current) => current)\n    return songs.reduce(function(accum, current) {\n        // do some other processing to the songs if needed\n        processor && processor(current)\n        // build a list of the songs to play (after the songToPlayId)\n        // to preserve order\n        const currentId = getCurrentId(current)\n        if(songToPlayId && !found) {\n            if (currentId === songToPlayId) {\n                found = true\n                return accum.concat(currentId)\n            }\n            else {\n                return accum\n            }\n        }\n        else {\n            return accum.concat(currentId)\n        }\n    }, [])\n}","\nimport * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer} from '../../utils/redux.js'\n\nexport default createReducer(initialState.asyncTasksInProgress, {\n    [types.BEGIN_ASYNC_OPERATION]: (state, payload) => state + 1,\n    [types.END_ASYNC_OPERATION]: (state, payload) => state - 1\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer} from '../../utils/redux.js'\n\nexport default createReducer(initialState.artists, {\n    [types.LOAD_ARTISTS_INDEX_SUCCESS]: (state, payload) => {\n        return {\n            ...state,\n            byIndex : payload.artistsIndex\n        }\n    },\n    [types.LOAD_ONE_ARTIST_SUCCESS]: (state, payload) => {\n        // Normalize the albums of the artist to just contain the IDs\n        const normalized_albums = payload.artist.album.map(album => album.id)\n        // As only the details of one artist is displayed at a time\n        // we can replace the existing content of byId with the new artist\n        return {\n            ...state,\n            byId : {\n                [payload.artist.id] : {\n                    ...payload.artist,\n                    album : normalized_albums\n                }\n            }\n        }\n    },\n    [types.LOGOUT_USER]: (state, payload) => initialState.artists,\n})","import * as types from \"../actions/actionTypes\"\nimport { isPlaylistMineByOwner, computeJointDurationOfSongs } from \"../../utils/utils\"\nimport initialState from \"./initialState\"\nimport { createReducer } from '../../utils/redux.js'\n\nexport default createReducer(initialState.playlists, {\n    [types.LOAD_PLAYLISTS_SUCCESS]: (state, payload) => {\n        // Join playlists in a new object to avoid modifying the state\n        var playlists = {}\n        for (var i = 0; i < payload.playlists.length; i++) {\n            var p = payload.playlists[i]\n            p = {...p, ...state.byId[p.id]}\n            // Append a boolean to know if the playlist is mine\n            p.isMine = isPlaylistMineByOwner(p.owner)\n            // Fill array of songs empty if not present\n            if( !p.songs ) {\n                p.songs = []\n            }\n            playlists[p.id] = p\n        }\n        // Return mixed with the state\n        return {\n            ...state,\n            byId : {\n                ...state.byId,\n                ...playlists\n            }\n        }\n    },\n    [types.ADD_SONGS_TO_PLAYLIST_RESULT]: (state, payload) => {\n        // Check if there were pending songs to add\n        const songsAdded = payload.songsAdded\n        // When updating the state, there is no necessity to update the \"songs\" array\n        // as it will get re-populated when the playlist's page is opened, but still \n        // let's do it just in case it is needed in the future\n        return {\n            ...state,\n            byId: {\n                ...state.byId,\n                [payload.playlist.id] : {\n                    ...payload.playlist,\n                    songCount : payload.playlist.songCount + songsAdded.length,\n                    duration: payload.playlist.duration + computeJointDurationOfSongs(payload.songsAdded),\n                    songs : state.byId[payload.playlist.id].songs.concat(songsAdded.map(song => song.id))\n                }\n            }\n        }\n    },\n    [types.REMOVE_SONGS_FROM_PLAYLIST_RESULT]: (state, payload) => {\n        // Update count in current playlist. When updating the state, in here it is\n        // necessary to remove the song from the list as songs are only removed when\n        // the playlist's page is loaded and the UI needs to be refreshed\n        const playlist = payload.playlist\n        const removedSongsIds = payload.removedSongs.map(song => song.id)\n        return {\n            ...state,\n            byId: {\n                ...state.byId,\n                [playlist.id] : {\n                    ...playlist,\n                    songCount : playlist.songCount - payload.removedSongs.length,\n                    duration : playlist.duration - computeJointDurationOfSongs(payload.removedSongs),\n                    songs : playlist.songs.filter(songId => !removedSongsIds.includes(songId) )\n                }\n            }\n        }\n    },\n    [types.DELETE_PLAYLIST_RESULT]: (state, payload) => {\n        let playlistsWithoutDeleted = {...state.byId}\n        delete playlistsWithoutDeleted[payload.playlist.id]\n        return {\n            ...state,\n            byId: playlistsWithoutDeleted\n        }\n    },\n    [types.EDIT_PLAYLIST_RESULT]: (state, payload) => {\n        // Look for this playlist in the state and check if something changed\n        const currentPlaylist = state.byId[payload.id]\n        if( currentPlaylist.name !== payload.name ||\n            currentPlaylist.comment !== payload.comment ||\n            currentPlaylist.public !== payload.public ) {\n            // Edit the values\n            const newPlaylist = { ...currentPlaylist, name: payload.name,comment: payload.comment,public: payload.public }\n            return {\n                ...state,\n                byId: {\n                    ...state.byId,\n                    [payload.id] : newPlaylist\n                }\n            }\n        }\n        return state\n    },\n    [types.LOAD_SINGLE_PLAYLIST_SUCCESS]: (state, payload) => {\n        const {entry, ...playlist} = payload.playlist\n        return {\n            ...state,\n            byId : {\n                ...state.byId,\n                [playlist.id] : {\n                    ...state.byId[playlist.id],\n                    ...playlist,\n                    songs : entry.map(song => song.id)\n                }\n            }\n        }\n    },\n    [types.LOGOUT_USER]: (state, payload) => initialState.playlists\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport { createReducer, set_starred_song_on_state } from '../../utils/redux.js'\n\nfunction put_songs_in_store(state, songs, clearCurrentList = true) {\n    // Transform the array of songs coming in the payload to a normalized object\n    let normalized_songs = songs.reduce( (current,song) => ({...current, [song.id] : song }), {} )\n    // Replace the current songs if \"clearCurrentList\" or append the new songs to\n    // the existing list\n    const newSongs = clearCurrentList\n        ? normalized_songs\n        : {...state.byId, ...normalized_songs}\n    return { ...state, byId : newSongs }\n}\n\nexport default createReducer(initialState.songs, {\n    [types.STAR_SONG_RESULT] : (state, payload) => {\n        let newState = state\n        // Toggle if it is found in the DB of songs\n        const modifiedSongsInDB = payload.songIds.filter(id => state.byId[id])\n        modifiedSongsInDB.forEach( (id) => {\n            newState = set_starred_song_on_state(newState, 'byId', id, payload.starred)\n        })\n        return newState\n    },\n    [types.LOAD_FAVOURITES_RESULT] : (state, payload) => put_songs_in_store(state, payload.songs, true),\n    [types.LOAD_SONGS_OF_ONE_ARTIST_SUCCESS] : (state, payload) => put_songs_in_store(state, payload.songs, true),\n    [types.LOAD_SONGS_OF_GENRE_SUCCESS] : (state, payload) => put_songs_in_store(state, payload.songs, true),\n    [types.LOAD_ALBUM_SUCCESS] : (state, payload) => put_songs_in_store(state, payload.album.song, true),\n    [types.LOAD_SINGLE_PLAYLIST_SUCCESS] : (state, payload) => put_songs_in_store(state, payload.playlist.entry, true),\n    [types.LOGOUT_USER]: (state, payload) => initialState.songs\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer} from '../../utils/redux.js'\n\nexport default createReducer(initialState.auth, {\n    [types.LOGIN_USER_REQUEST]: (state, payload) => {\n        return Object.assign({}, state, {\n            'isAuthenticating': true,\n            'statusText': null\n        })\n    },\n    [types.LOGIN_USER_SUCCESS]: (state, payload) => {\n        return Object.assign({}, state, {\n            'isAuthenticating': false,\n            'isAuthenticated': true,\n            'statusText': 'You have been successfully logged in.'\n        })\n\n    },\n    [types.LOGIN_USER_FAILURE]: (state, payload) => {\n        return Object.assign({}, state, {\n            'isAuthenticating': false,\n            'isAuthenticated': false,\n            'statusText': payload.statusText\n        })\n    },\n    [types.LOGOUT_USER]: (state, payload) => {\n        return Object.assign({}, state, {\n            'isAuthenticated': false,\n            'statusText': 'You have been successfully logged out.'\n        })\n    },\n    [types.LAZY_LOGIN_IGNORE]: (state, payload) => {\n        return Object.assign({}, state, {\n            'isAuthenticating': false,\n        })\n    }\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer, get_normalized_songs, set_starred_song_on_state} from '../../utils/redux.js'\n\nexport default createReducer(initialState.search, {\n    [types.SEARCH_RESULT]: (state, payload) => {\n        return {\n            'albums': payload.album,\n            'artists': payload.artist,\n            'songs': payload.song ? payload.song.map(song => song.id) : [],\n            'songsById' : payload.song ? get_normalized_songs(payload.song) : {}\n        }\n    },\n    [types.STAR_SONG_RESULT] : (state, payload) => {\n        let newState = state\n        // Toggle if it is found in the DB of songs\n        const modifiedSongsInDB = payload.songIds.filter(id => state.songsById[id])\n        modifiedSongsInDB.forEach( (id) => {\n            newState = set_starred_song_on_state(newState, 'songsById', id, payload.starred)\n        })\n        return newState\n    },\n    [types.LOGOUT_USER]: (state, payload) => {\n        return initialState.search\n    }\n})","\nimport initialState from \"./initialState\"\n\nfunction build_last_operation_result(type, message) {\n    return { id: Date.now(), type:type, message:message }\n}\n\nfunction does_action_contain_alert(action) {\n    return action.alert && action.alert.type && action.alert.message\n}\n\n/*\n * Usually, actions are dispatched with three keys:\n * type, payload, alert\n * Function \"createReducer\" in utils/redux.js just takes the \"payload\" object and passes it to the\n * body of the reducer to map it to its appropiate function.\n * This reducer doesnt use \"createReducer\" because it doesn't care about the type\n * of the action, it just looks for the \"alert\" key and if it is present, then that means\n * the action meant to display an alert notification and it is displayed.\n */\nexport default (state = initialState.alert, action) => {\n    // Check if a valid \"alert\" object is found in this action\n    return does_action_contain_alert(action)\n        ? build_last_operation_result(action.alert.type, action.alert.message)\n        : state\n}","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer} from '../../utils/redux.js'\n\nexport default createReducer(initialState.albums, {\n    [types.LOAD_ALBUM_SUCCESS]: (state, payload) => {\n        const album = payload.album\n        album.song = album.song.map(song => song.id)\n        return {\n            ...state,\n            byId : {\n                ...state.byId,\n                [album.id] : album\n            }\n        }\n    },\n    [types.LOAD_ALBUMS_LIST_SUCCESS]: (state, payload) => {\n        const albums = payload.albums.reduce( (accum, curr) => ({\n            [curr.id] : curr, ...accum\n        }), {})\n        return {\n            ...state,\n            byId : albums\n        }\n    },\n    [types.LOAD_ONE_ARTIST_SUCCESS]: (state, payload) => {\n        // Normalize the albums of the artist to just contain the IDs\n        const artists_albums_by_id = {}\n        payload.artist.album.forEach(album => {\n            artists_albums_by_id[album.id] = album\n        })\n        return {\n            ...state,\n            byId : artists_albums_by_id\n        }\n    },\n    [types.LOAD_SONGS_OF_ONE_ARTIST_SUCCESS]: (state, payload) => {\n        // Look for albums with songs present in this payload and\n        // put its corresponding IDs\n        let newByIdState = {...state.byId}\n        payload.songs.forEach(song => {\n            const thisAlbum = newByIdState[song.albumId]\n            if( thisAlbum ){\n                newByIdState = {\n                    ...newByIdState,\n                    [song.albumId] : {\n                        ...thisAlbum,\n                        song : thisAlbum.song ? thisAlbum.song.concat(song.id) : [song.id]\n                    }\n                }\n            }\n        })\n        return {\n            ...state,\n            byId : newByIdState\n        }\n    },\n    [types.STAR_ALBUM_RESULT]: (state, payload) => {\n        let newAlbumsById = {}\n        payload.albumIds.forEach(albumId => {\n            newAlbumsById[albumId] = {\n                ...state.byId[albumId],\n                starred: payload.starred\n            }\n        })\n        return {\n            ...state,\n            byId: {\n                ...state.byId,\n                ...newAlbumsById,\n            }\n        }\n    },\n    [types.LOGOUT_USER]: (state, payload) => initialState.albums\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer} from '../../utils/redux.js'\n\nexport default createReducer(initialState.favourites, {\n    [types.LOAD_FAVOURITES_RESULT] : (state, payload) => payload.songs.map(song => song.id),\n    [types.STAR_SONG_RESULT] : (state, payload) => {\n        let newSongs = null\n        // Concatenate the faved songs (in a new array) if a new song was added\n        if( payload.starred ) {\n            newSongs = state.concat( payload.songIds )\n        }\n        // Or create a new array without the deleted songs as the songs' array\n        else {\n            newSongs = state.filter(s => !payload.songIds.includes(s))\n        }\n        return newSongs\n    },\n    [types.LOGOUT_USER]: (state, payload) => initialState.favourites\n})","import * as types from \"../actions/actionTypes\"\nimport initialState from \"./initialState\"\nimport {createReducer, get_normalized_songs, set_starred_song_on_state, get_shuffled_songs, get_ordered_songs, normalize_songs_processor, original_songs_processor} from '../../utils/redux.js'\n\nexport default createReducer(initialState.musicPlayer, {\n    [types.TOGGLE_SHUFFLE_ON]: (state, payload) => {\n        // shuffle the original list of songs and keep the current song playing\n        const newList = get_shuffled_songs(state.original, state.currentSongId)\n        return {\n            ...state,\n            currentSongIndex : 0,\n            isShuffleOn: true,\n            queue: newList\n        }\n    },\n    [types.TOGGLE_SHUFFLE_OFF]: (state, payload) => {\n        // recover the original order, but start from the song currently playing\n        const newList = get_ordered_songs(state.original, state.currentSongId)\n        return {\n            ...state,\n            currentSongIndex : 0,\n            isShuffleOn: false,\n            queue: newList\n        }\n    },\n    [types.SEEK_TO_SONG_IN_QUEUE]: (state, payload) => {\n        // Look for the index of this song in the queue\n        const newIndex = state.queue.indexOf(payload.song.id)\n        return {\n            ...state,\n            currentSongIndex : newIndex !== -1 ? newIndex : state.currentSongIndex,\n            currentSongId : newIndex !== -1 ? payload.song.id : state.currentSongId,\n        }\n    },\n    [types.ADD_SONGS_TO_QUEUE]: (state, payload) => {\n        // map the songs to just their ids to add them to the queues\n        const newSongsIds = payload.songs.map(song => song.id)\n        const newQueue = [...state.queue, ...newSongsIds]\n        const newOriginal = [...state.original, ...newSongsIds]\n        return {\n            ...state,\n            /* Songs should start playing if the queue was empty, so the index should be set to 0.\n             * If a song was already playing, it should remain playing */\n            currentSongIndex : state.currentSongIndex || 0,\n            queue : newQueue,\n            original : newOriginal,\n            songsById : {...state.songsById, ...get_normalized_songs(payload.songs) }\n        }\n    },\n    [types.REMOVE_SONGS_FROM_QUEUE]: (state, payload) => {\n        // Remove all the songs in the payload from the queue and the original list\n        const idsForDeletion = payload.songs.map(song => song.id)\n        const newQueue = state.queue.filter(songId => !idsForDeletion.includes(songId))\n        const newOriginal = state.original.filter(songId => !idsForDeletion.includes(songId))\n        // If the song currently playing is removed, check that the queue is not empty\n        const currentlyPlayingId = state.queue[state.currentSongIndex]\n        if( idsForDeletion.includes(currentlyPlayingId) ) {\n            // Only play the next one if there are songs remaining in the queue\n            const hasSongsLeft = (state.currentSongIndex != null) && (state.currentSongIndex < newQueue.length)\n            if( !hasSongsLeft ) {\n                return initialState.musicPlayer\n            }\n        }\n        // Create new db of the songs that survived\n        const newSongsById = Object.assign({}, state.songsById)\n        idsForDeletion.forEach(id => {delete newSongsById[id]} )\n        // Return the final state\n        return {\n            ...state,\n            queue : newQueue,\n            original : newOriginal,\n            songsById : newSongsById\n        }\n    },\n    [types.PUT_SONGS_IN_QUEUE]: (state, payload) => {\n        // Replace the songs in the queue with the proper setting\n        let newList = []\n        let newOriginal = []\n        let newNormalized = {}\n        // create a processor to get all the newValues with one iteration\n        const processor = (current) => {\n            // Create a new dictionary with the normalized songs\n            newNormalized = normalize_songs_processor(current, newNormalized)\n            // Create a new list with the original list\n            newOriginal = original_songs_processor(current, newOriginal)\n        }\n        // get the newList in the correct order \n        const songToPlayId = payload.songToPlay ? payload.songToPlay.id : null\n        if( state.isShuffleOn ) {\n            newList = get_shuffled_songs(payload.songs, songToPlayId, processor)\n        }\n        else {\n            newList = get_ordered_songs(payload.songs, songToPlayId, processor)\n        }\n        return {\n            ...state,\n            currentSongId: newList[0],\n            currentSongIndex : 0,\n            queue : newList,\n            original : newOriginal,\n            songsById : newNormalized\n        }\n    },\n    [types.CLEAR_QUEUE]: (state, payload) => initialState.musicPlayer,\n    [types.PLAY_NEXT_SONG]: (state, payload) => {\n        const hasNext = (state.currentSongIndex != null) && (state.currentSongIndex + 1 < state.queue.length)\n        // When the existing queue has finished playing, clear it\n        const nextIndex = state.currentSongIndex + 1\n        return hasNext ? {\n            ...state,\n            currentSongIndex : nextIndex,\n            currentSongId: state.queue[nextIndex]\n        } : initialState.musicPlayer\n    },\n    [types.PLAY_PREVIOUS_SONG]: (state, payload) => {\n        const hasPrevious = state.currentSongIndex > 0\n        // When the existing queue has finished playing, clear it\n        const prevIndex = state.currentSongIndex - 1\n        return hasPrevious ? {\n            ...state,\n            currentSongIndex : prevIndex,\n            currentSongId: state.queue[prevIndex]\n        } : initialState.musicPlayer\n    },\n    [types.STAR_SONG_RESULT] : (state, payload) => {\n        let newState = state\n        // Toggle if it is found in the DB of songs\n        payload.songIds.forEach( (id) => {\n            newState = set_starred_song_on_state(newState, 'songsById', id, payload.starred)\n        })\n        return newState\n    },\n    [types.LOGOUT_USER]: (state, payload) => initialState.musicPlayer\n})","import { combineReducers } from \"redux\"\nimport asyncTasksInProgress from \"./asyncTasksReducer\"\nimport artists from \"./artistsReducer\"\nimport playlists from \"./playlistsReducer\"\nimport songs from \"./songsReducer\"\nimport auth from \"./authReducer\"\nimport search from \"./searchReducer\"\nimport alert from \"./alertsReducer\"\nimport albums from \"./albumsReducer\"\nimport favourites from \"./favouritesReducer\"\nimport musicPlayer from \"./musicPlayerReducer\"\n\nexport default combineReducers({\n    asyncTasksInProgress,\n    artists,\n    playlists,\n    songs,\n    auth,\n    search,\n    alert,\n    albums,\n    favourites,\n    musicPlayer\n})","import { createStore, applyMiddleware } from \"redux\"\nimport rootReducer from \"./reducers\"\nimport thunk from \"redux-thunk\"\n\nexport default function configureStore(initialState) {\n    return createStore(rootReducer, initialState, applyMiddleware(thunk))\n}\n","// Load list of artists\nexport const LOAD_ARTISTS = \"LOAD_ARTISTS\"\nexport const LOAD_ARTISTS_INDEX_SUCCESS = \"LOAD_ARTISTS_INDEX_SUCCESS\"\n// Load single artist\nexport const LOAD_ONE_ARTIST_SUCCESS = \"LOAD_ONE_ARTIST_SUCCESS\"\nexport const LOAD_SONGS_OF_ONE_ARTIST_SUCCESS = \"LOAD_SONGS_OF_ONE_ARTIST_SUCCESS\"\n// Load playlists\nexport const LOAD_PLAYLISTS = \"LOAD_PLAYLISTS\"\nexport const LOAD_PLAYLISTS_SUCCESS = \"LOAD_PLAYLISTS_SUCCESS\"\nexport const LOAD_SINGLE_PLAYLIST_SUCCESS = \"LOAD_SINGLE_PLAYLIST_SUCCESS\"\n// Edit playlist\nexport const ADD_SONGS_TO_PLAYLIST_RESULT = \"ADD_SONGS_TO_PLAYLIST_RESULT\"\nexport const REMOVE_SONGS_FROM_PLAYLIST_RESULT = \"REMOVE_SONGS_FROM_PLAYLIST_RESULT\"\nexport const DELETE_PLAYLIST_RESULT = \"DELETE_PLAYLIST_RESULT\"\nexport const EDIT_PLAYLIST_RESULT = \"EDIT_PLAYLIST_RESULT\"\n// Songs management\nexport const ADD_SONGS_TO_QUEUE = \"ADD_SONGS_TO_QUEUE\"\nexport const PUT_SONGS_IN_QUEUE = \"PUT_SONGS_IN_QUEUE\"\nexport const PLAY_NEXT_SONG = \"PLAY_NEXT_SONG\"\nexport const PLAY_PREVIOUS_SONG = \"PLAY_PREVIOUS_SONG\"\nexport const STAR_SONG_RESULT = \"STAR_SONG_RESULT\"\nexport const CLEAR_QUEUE = \"CLEAR_QUEUE\"\nexport const REMOVE_SONGS_FROM_QUEUE = \"REMOVE_SONGS_FROM_QUEUE\"\nexport const SEEK_TO_SONG_IN_QUEUE = \"SEEK_TO_SONG_IN_QUEUE\"\nexport const TOGGLE_SHUFFLE_ON = \"TOGGLE_SHUFFLE_ON\"\nexport const TOGGLE_SHUFFLE_OFF = \"TOGGLE_SHUFFLE_OFF\"\n// Authentication\nexport const LAZY_LOGIN_IGNORE = \"LAZY_LOGIN_IGNORE\"\nexport const LOGIN_USER_REQUEST = \"LOGIN_USER_REQUEST\"\nexport const LOGIN_USER_FAILURE = \"LOGIN_USER_FAILURE\"\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\"\nexport const LOGOUT_USER = \"LOGOUT_USER\"\n// API calls\nexport const BEGIN_ASYNC_OPERATION = \"BEGIN_ASYNC_OPERATION\"\nexport const END_ASYNC_OPERATION = \"END_ASYNC_OPERATION\"\n// Search\nexport const SEARCH_RESULT = \"SEARCH_RESULT\"\n// Albums\nexport const LOAD_ALBUM_SUCCESS = \"LOAD_ONE_ALBUM_SUCCESS\"\nexport const LOAD_ALBUMS_LIST_SUCCESS = \"LOAD_ALBUMS_LIST_SUCCESS\"\nexport const STAR_ALBUM_RESULT = \"STAR_ALBUM_RESULT\"\n// Favourites\nexport const LOAD_FAVOURITES_RESULT = \"LOAD_FAVOURITES_RESULT\"\n// Genres\nexport const LOAD_SONGS_OF_GENRE_SUCCESS = \"LOAD_SONGS_OF_GENRE_SUCCESS\"","\nexport function isPlaylistMineByOwner(owner){ return owner === localStorage.getItem('username') }\n\n// From: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\nexport function sortSongsByKey(songs, key, type) {\n    return new Promise( (resolve, reject) => {\n        let sortedArray = [...songs]\n        sortedArray.sort( (a,b) => {\n            var nameA = a[key].toUpperCase() // ignore upper and lowercase\n            var nameB = b[key].toUpperCase() // ignore upper and lowercase\n            if (nameA < nameB) {\n                return type === \"asc\" ? -1 : 1\n            }\n            if (nameA > nameB) {\n                return type === \"asc\" ? 1 : -1\n            }\n            // names must be equal\n            return 0\n        })\n        resolve(sortedArray)\n    })\n}\n\nexport function filterSongsByValue(songs, filter) {\n    return new Promise( (resolve, reject) => {\n        // Check if there is a filter to apply\n        if( filter ){\n            // ignore upper and lowercase\n            const fixedFilter = filter.toUpperCase()\n            // Look for songs with this filter value in the:\n            // title, artist or album, which are the most common keys someone\n            // would like to filter\n            const filteredArray = songs.filter( song => {\n                return song.title.toUpperCase().indexOf(fixedFilter) !== -1 ||\n                    song.artist.toUpperCase().indexOf(fixedFilter) !== -1 ||\n                    song.album.toUpperCase().indexOf(fixedFilter) !== -1\n            })\n            resolve(filteredArray)\n        }\n        else {\n            resolve(songs)\n        }\n    })\n}\n\nexport function computeJointDurationOfSongs(songs) {\n    return songs.reduce( (a,b) => ({duration: a.duration+b.duration}), {duration:0} ).duration\n}"],"sourceRoot":""}